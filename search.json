[{"title":"Linux部署Nginx-UI","date":"2024-12-18T16:00:00.000Z","url":"/202412/5246a33476d7.html","tags":[["服务器管理","/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%A1%E7%90%86/"],["nginx管理","/tags/nginx%E7%AE%A1%E7%90%86/"],["nginx-ui","/tags/nginx-ui/"],["nginx","/tags/nginx/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["Nginx服务器","/categories/%E5%AE%9E%E6%88%98/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"]],"content":" 项目地址： 简介通过这个开源的项目，可以在线查看服务器 CPU、内存、系统负载、磁盘使用率等指标；在线编辑 Nginx 配置文件；在线查看 Nginx 日志 步骤1. 下载运行根据服务器情况下载对应版本的软件包 查看服务器架构 解压 首次解压下来只有 nginx-ui 这个可执行文件 运行 配置nginx的相关内容到 app.ini 里 关闭服务 2. 设置 systemd 服务 新建 nginx-ui.service 文件 内容如下： 新建 nginx-ui.service.d 目录 重新加载配置 启动服务 查看服务状态 "},{"title":"clash verge rev部分配置","date":"2024-11-15T02:06:04.526Z","url":"/202411/7faf6254d004.html","categories":[[" ",""]],"content":"全局配置脚本"},{"title":"局域网内实现https访问","date":"2024-11-13T16:00:00.000Z","url":"/202411/896c1520e5b2.html","tags":[["https","/tags/https/"],["局域网","/tags/%E5%B1%80%E5%9F%9F%E7%BD%91/"],["ssl证书","/tags/ssl%E8%AF%81%E4%B9%A6/"],["mkcert","/tags/mkcert/"],["openssl","/tags/openssl/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["局域网相关","/categories/%E5%AE%9E%E6%88%98/%E5%B1%80%E5%9F%9F%E7%BD%91%E7%9B%B8%E5%85%B3/"]],"content":"背景在内网环境下，能否实现通过 https 的方式访问内网服务器提供的服务呢？且不希望看到浏览器的证书警告。答案是肯定的，我们可以在这台服务器上使用 mkcert 生成 HTTPS 证书，并在所有需要访问该服务的客户端 PC 上安装**根证书 ** ！！！ 创建根证书的意义当我们说 创建根证书 时，指的是生成一个 自签名证书，这个证书本身是“根证书颁发机构（CA）”的身份象征，意味着它是信任链的起点。在公钥基础设施（PKI）中，根证书（CA 证书）是所有信任证书的基础。 为什么要有根证书？ 信任链： 现代浏览器和操作系统都建立了 信任链。浏览器或者操作系统通过验证证书的签发方来判断一个网站的安全性。如果证书是由一个受信任的根证书颁发的，那么它就会被认为是可信的。 如果我们只是生成一个普通的证书和私钥，而没有根证书，那么生成的证书不会被浏览器信任，用户就会看到“不受信任的证书”的警告。 自签名证书的应用场景： 在 本地开发 环境或者 企业内部系统 中，可能不希望依赖外部的证书颁发机构（CA）来申请和管理证书，这时候就可以使用 mkcert 来创建一个 本地根证书。 mkcert 会创建一个 本地自签名根证书，并将它安装到你的操作系统或者浏览器的信任根证书存储中。这样，你自己生成的证书就会被信任，不会触发浏览器的警告。 证书和私钥的生成直接生成证书和私钥当然是可以的，但没有根证书的情况下，浏览器和操作系统无法识别该证书的有效性，因为它不属于任何一个受信任的证书链。 mkcert 通过 创建根证书并信任它，来让生成的证书能够在浏览器中被信任。 如果只是生成一个证书和私钥，而没有创建根证书，那么它会被视为自签名证书。即使你自己信任它，浏览器依然会警告“不受信任的证书”。 通过 mkcert 创建根证书后，这个根证书被添加到信任的证书存储中，这样 所有由这个根证书签发的证书 都会被自动信任。 方案一优点：快捷、省事 缺点：有效期不可控，默认2年3个月 第一步：安装mkcert 下载地址： 我这里的测试服务器是windows server的，我就在当前服务器上安装 mkcert-v1.4.4-windows-amd64.exe 就行，并将名字重新命名为mkcert.exe即可，把这个mkcert.exe的存放路径配置到环境变量，方便在任何地方使用命令，这里说的安装就是放在一个目录下即可 第二步：生成根证书 把生成的rootCA.pem拷贝出来，因为这个要在第四步安装到客户端PC 到这里这一步就结束了，这个命令已经默认把证书安装到了本机了，所以在本机不用管第四步了 第三步：生成证书和密钥，并配置生成证书时，指定一个或多个域名（可以是 localhost、IP 地址或你自己定义的域名）。 这个命令会为以下域名生成证书： example.com *.example.com（包含子域名） localhost 127.0.0.1（IPv4 地址） ::1（IPv6 地址） mkcert 会为这些域名生成 example.com+2.pem 和 example.com+2-key.pem 文件： .pem 文件是公钥证书 .key 文件是私钥 把证书配置到服务中去，这里就不再详细讲了 第四步：在客户端PC上安装根证书Windows 提供了 证书管理器 工具，可以用来查看和管理证书。你可以将 .pem 文件导入证书存储区。 步骤： 打开证书管理器： 按下 Win + R，在运行框中输入 mmc 并按 Enter。 在 MMC（Microsoft Management Console）中，点击 文件 &gt; 添加&#x2F;删除管理单元。 在管理单元窗口中，选择 证书，点击 添加。 选择 计算机账户，然后点击 下一步 &gt; 完成。 导入证书： 在左侧窗格中，展开 证书 &gt; 受信任的根证书颁发机构。 右键点击 证书 文件夹，选择 所有任务 &gt; 导入。 在导入向导中，点击 浏览，选择你的 rootCA.pem 文件。 点击 下一步 并完成导入。 完成后，你可以查看证书是否已成功添加到 证书管理器 中。 第五步：访问服务至此就完成了，查看证书有效期为2年3个月 方案二mkcert 本身是不能控制生成的根证书的有效期的，那么我们可以通过openssl来生成自定义有效期的根证书 优点：有效期可控 缺点：不方便、需要专业知识 1. 下载 OpenSSL目前，OpenSSL 官方不提供直接的 Windows 版安装包，但可以通过第三方编译的版本（例如 Shining Light Productions 提供的安装包）来安装。你可以从以下链接下载 Windows 版的 OpenSSL： Shining Light Productions:  下载页面上通常会提供 32 位 和 64 位 的版本，根据你的系统选择合适的版本下载。 2. 安装 OpenSSL 下载完成后，运行安装程序。 安装过程中的关键选项： 选择安装目录。建议安装到 C:\\OpenSSL-Win64 或 C:\\OpenSSL-Win32。 选择是否将 OpenSSL 二进制文件目录添加到系统 PATH 中（推荐勾选）。 选择是否安装 Visual C++ Redistributable，如果系统已经有该组件，可以跳过。 完成安装后，如果安装时选择添加了 OpenSSL 到系统 PATH，则无需手动设置。如果没有，则需要手动添加 OpenSSL 的安装目录到 PATH 环境变量中。 3. 配置 PATH 环境变量（如有需要）如果在安装过程中没有勾选“添加 OpenSSL 到系统 PATH”，可以手动配置环境变量： 右键“此电脑” 或 “我的电脑” &gt; 属性。 点击 高级系统设置 &gt; 环境变量。 在“系统变量”部分，找到 Path，双击打开。 点击 新建，然后输入 OpenSSL 的安装目录路径（例如 C:\\OpenSSL-Win64\\bin）。 确认后关闭窗口。 4. 验证 OpenSSL 安装 打开命令提示符（CMD）或 PowerShell。 输入以下命令检查是否安装成功： 如果安装成功，会显示 OpenSSL 的版本信息。 5. 准备配置文件 CA.cnf ServerCA.ext 6. 生成根证书 -x509 表示输出一个X.509证书，x509 是证书的标准格式。 -newkey rsa:2048 表示生成一个新的密钥对，rsa:2048 表示使用 RSA 算法，并且密钥长度为 2048 位。RSA 是一种常用的非对称加密算法。 -out rootCA.cer 指定了输出的证书文件名。 -outform PEM 指定证书的输出格式为 PEM（Base64 编码的 ASCII 格式）。PEM 格式常用于证书文件的存储。 -keyout rootCA.pvk这个选项指定了生成的私钥文件的输出名称。在这里，私钥将保存为 rootCA.pvk 文件。 -days 365这个选项指定证书的有效期为 365 天。自签名证书的有效期通常较短，主要用于测试或内部使用。 -verbose启用详细模式，在执行过程中输出更多的调试信息。 -config CA.cnf指定 OpenSSL 使用的配置文件。在这里，CA.cnf 是一个配置文件，通常包含有关证书生成的详细设置，例如扩展字段、路径等。 -nodes这个选项表示生成的私钥不加密。通常情况下，私钥会被加密以增加安全性，但此选项用于跳过私钥加密，通常用于自动化部署。 -sha256这个选项指定使用 SHA-256 哈希算法来生成证书的签名。SHA-256 是一种广泛使用的安全哈希算法，提供了较强的抗碰撞性。 -subj &quot;/CN=ZhiBo RSA SSL CA 2024/O=ZhiBo Inc/OU=xxx.xxx.xx&quot;这个选项设置证书的主题（Subject），即证书的基本信息。/CN=ZhiBo RSA SSL CA 2024 是证书的通用名称（Common Name），/O=ZhiBo Inc 是组织名称（Organization），/OU=xxx.xxx.xx 是组织单位（Organizational Unit）。这通常用于标识证书的发行机构或所有者，可设置为官网。 7. 生成一个新的证书请求生成的证书请求（ServerCA.req）通常会被提交给证书颁发机构（CA）进行签发。如果这是自签名证书的请求，你可以自己签发证书，也可以使用该请求文件让其他证书颁发机构签发证书。 8. 生成证书和密钥，并配置 openssl x509 这是 OpenSSL 用于处理 X.509 证书的命令。X.509 是最常用的数字证书格式，它定义了证书的结构。通过此命令，可以签发证书、查看证书信息等。 -req 这个选项表示该命令是用来处理一个证书请求（CSR）。通过 CSR 文件（ServerCA.req）来签发证书。 -CA rootCA.cer 这个选项指定签发证书的根证书（CA 证书）。在这里，rootCA.cer 是用于签署请求的根证书文件。这个根证书将被用来验证所签署的证书。 -CAkey rootCA.pvk 这个选项指定根证书对应的私钥文件。rootCA.pvk 是用于签署证书请求的私钥文件。私钥用于生成签名，证明证书是由相应的根证书所有者签发的。 -in ServerCA.req 该选项指定输入文件，即证书签名请求（CSR）。在这里，ServerCA.req 是先前生成的证书请求文件。它包含了申请证书的主体信息（如公钥、域名等）。 -out ServerCA.cer 该选项指定输出文件，即签发的证书。在这里，生成的证书将保存为 ServerCA.cer，通常是 PEM 格式的 X.509 证书。 -days 365 这个选项指定新生成证书的有效期为 365 天。证书在到期后需要重新签发或续期。 -extfile ServerCA.ext 该选项指定一个外部配置文件，用于添加扩展（extensions）到生成的证书中。扩展文件（通常是 .ext 文件）包含额外的证书信息，如主题备用名称（SAN）、密钥用途、CRL 分发点等。这里的 ServerCA.ext 是包含扩展配置的文件。 -sha256 这个选项指定使用 SHA-256 哈希算法对证书进行签名。SHA-256 是目前安全性较高的哈希算法，用于生成签名。 -set_serial 0x1111 这个选项为生成的证书设置一个唯一的序列号。证书的序列号必须是唯一的，且不重复。在这里，序列号被设置为 0x1111，即十六进制的 1111。序列号通常是一个大整数，确保每个证书的唯一性。 总结这条命令的作用是： 使用根证书 rootCA.cer 和根证书私钥 rootCA.pvk 来签署一个证书请求（CSR），该请求文件为 ServerCA.req； 签发的证书将被保存为 ServerCA.cer，并设置为有效期 365 天； 使用 SHA-256 哈希算法对证书进行签名； 证书的序列号被设置为 0x1111； 使用 ServerCA.ext 文件来指定证书的扩展信息。 最终生成的 ServerCA.cer 就是签名的证书，通常它将包含在服务器上，或者提供给需要验证其身份的客户端使用。"},{"title":"Nginx的妙用","date":"2024-11-12T16:00:00.000Z","url":"/202411/8b0b5489a9a6.html","tags":[["Nginx","/tags/Nginx/"],["代理服务器","/tags/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/"],["压缩","/tags/%E5%8E%8B%E7%BC%A9/"],["gzip","/tags/gzip/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["Nginx服务器","/categories/%E5%AE%9E%E6%88%98/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"]],"content":"文件压缩如果我们租用了一个带宽很低的服务器，网站访问速度会很慢，这时我们可以通过让nginx开启GZIP压缩来提高网站的访问速度。 首先对nginx进行限速操作，限制每个连接的访问速度为128K来建立一个比较慢的访问场景 修改配置文件，进行限速操作 nginx返回请求头信息如下： 修改nginx.conf配置文件，开启GZIP压缩 再次进行访问，我们可以发现js文件已经被压缩，加载时间缩短到29.26s，且文件大小也确实被压缩了 nginx返回请求头中添加了Content-Encoding: gzip的信息 "},{"title":"V2rayN的PAC设置","date":"2024-10-23T16:00:00.000Z","url":"/202410/94d8239ae8e2.html","tags":[["V2rayN","/tags/V2rayN/"],["PAC设置","/tags/PAC%E8%AE%BE%E7%BD%AE/"]],"categories":[["备忘","/categories/%E5%A4%87%E5%BF%98/"]],"content":"简介一款科学上网工具 详情软件：v2rayN版本：V3.27地址： 参数设置-》用户PAC设置 "},{"title":"Oshi服务器信息采集","date":"2024-10-21T16:00:00.000Z","url":"/202410/346dace19467.html","tags":[["maven","/tags/maven/"],["获取服务器信息","/tags/%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BF%A1%E6%81%AF/"],["服务器","/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"],["springboot","/tags/springboot/"],["mvn","/tags/mvn/"]],"categories":[["备忘","/categories/%E5%A4%87%E5%BF%98/"]],"content":"简介在常规的开发中，能够监控服务器的运行情况至关重要 比如： 监控CPU信息 监控磁盘状态 监控 jvm 信息 监控服务器信息 OSHI是一个免费的基于JNA的Java操作系统和硬件信息库。它不需要安装任何额外的本机库，旨在提供跨平台实现来检索系统信息，如操作系统版本、进程、内存和CPU使用情况、磁盘和分区、设备、传感器等。 开源地址： 使用方法："},{"title":"邮箱","date":"2024-10-21T16:00:00.000Z","url":"/202410/361933b1d49d.html","tags":[["邮箱","/tags/%E9%82%AE%E7%AE%B1/"]],"categories":[["备忘","/categories/%E5%A4%87%E5%BF%98/"]],"content":"微软邮箱：&#104;&#102;&#x73;&#x68;&#97;&#111;&#98;&#x69;&#110;&#103;&#64;&#111;&#x75;&#x74;&#108;&#111;&#111;&#x6b;&#46;&#99;&#x6f;&#109; 密码：老密码 chatgpt账号：苹果账号&#x68;&#x66;&#114;&#x67;&#x77;&#114;&#x67;&#x77;&#x40;&#x31;&#54;&#51;&#46;&#x63;&#111;&#109;"},{"title":"集成微信相关功能","date":"2024-10-21T16:00:00.000Z","url":"/202410/608437979f1a.html","tags":[["公众号","/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"],["小程序","/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"],["微信支付","/tags/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"],["开放平台","/tags/%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0/"],["微信Java开发工具包","/tags/%E5%BE%AE%E4%BF%A1Java%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8C%85/"]],"categories":[["备忘","/categories/%E5%A4%87%E5%BF%98/"]],"content":"简介微信Java开发工具包，支持包括微信支付、开放平台、公众号、企业微信、视频号、小程序等微信功能模块的后端开发 开源地址："},{"title":"打印机打印断线问题排查方法","date":"2024-08-27T16:00:00.000Z","url":"/202408/d47f3b85e297.html","tags":[["爱普生","/tags/%E7%88%B1%E6%99%AE%E7%94%9F/"],["打印机","/tags/%E6%89%93%E5%8D%B0%E6%9C%BA/"],["堵头","/tags/%E5%A0%B5%E5%A4%B4/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["实用方法","/categories/%E6%9D%82%E6%96%87/%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95/"]],"content":"​ 方法一：普通清洗，用电脑操作 方法二：深度清洗，用电脑操作 以上方法，通过 Win + R 输入 control printers 右键打印首选项 - 维护 方法三：打开加墨的那几个小口，让空气充分进入，然后 进行方法一 方法四：购买清洗液、注射器，可打开打印机，查看是否有空气，先把空气抽走，最好是抽不同颜色的时候清理一下注射器 方法五：用酒精清洗打印头"},{"title":"Frp 内网穿透","date":"2024-08-25T16:00:00.000Z","url":"/202408/3fbcc70eb87a.html","tags":[["Frp","/tags/Frp/"],["内网穿透","/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["内网穿透","/categories/%E5%AE%9E%E6%88%98/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"]],"content":"简介官网： FRP(Fast Reverse Proxy)是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。 基本原理： 在带有公网 ip 的云服务器上部署 frp 的服务端 frps 在需要穿透的内网服务器上部署 frp 的客户端 frpc 每个客户端都会有一个配置文件用于和服务器连接 公网服务器充当代理服务器，用户访问 公网ip + 端口时，公网服务器的 frps 服务会根据端口号，自动转发到对应的内网服务器上，从而访问到内网服务 下载服务端docker镜像 下载客户端docker镜像 通过域名访问内网服务通过域名访问内网服务，大体有以下两个方案： 直接通过 配置 frps.toml 实现（简单推荐） 通过 nginx 做转发 方案一服务端配置文件 frps.toml 客户端配置文件 frpc.toml 方案二 由于加入了nginx代理，所以这里列出了nginx的配置 服务端配置文件 frps.toml 客户端配置文件 frpc.toml 自定义404页面404.html "},{"title":"Python的相关知识","date":"2024-08-08T16:00:00.000Z","url":"/202408/8891760a24b5.html","tags":[["Python","/tags/Python/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["11-Python相关笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11-Python%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"]],"content":"常用命令pip 常用的第三方模块requests作用：用requests获取URL资源，就是这么简单！ 问题汇总pip install 速度慢 更换镜像源 安装时指定 "},{"title":"Windows 服务器安装 MQTT 服务","date":"2024-07-22T16:00:00.000Z","url":"/202407/f14bb154fdfd.html","tags":[["windows server 2022","/tags/windows-server-2022/"],["emqx","/tags/emqx/"],["mqtt服务","/tags/mqtt%E6%9C%8D%E5%8A%A1/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["Windows服务器","/categories/%E5%AE%9E%E6%88%98/Windows%E6%9C%8D%E5%8A%A1%E5%99%A8/"]],"content":"简介EMQX 是基于 Erlang&#x2F;OTP 平台开发的开源物联网 MQTT 消息服务器，目前广泛应用于全球各行业物联网平台建设中。其设计目标是实现高可靠承载海量物联网终端的 MQTT 连接，支持在海量物联网设备间低延时消息路由 MQTT 是一种基于标准的消息传递协议或规则集，用于机器对机器的通信。智能传感器、可穿戴设备和其他物联网（IoT）设备通常必须通过带宽有限的资源受限网络传输和接收数据。这些物联网设备使用 MQTT 进行数据传输，因为它易于实施，并且可以有效地传输物联网数据。MQTT 支持设备到云端和云端到设备之间的消息传递 下图展示了 MQTT 发布&#x2F;订阅过程。温度传感器作为客户端连接到 MQTT Broker，并通过发布操作将温度数据发布到一个特定主题（例如 Temperature）。MQTT Broker 接收到该消息后会负责将其转发给订阅了相应主题（Temperature）的订阅者客户端。 MQTT Broker 搭建环境说明 Windows Server 2022 Datacenter emqx-5.0.26-windows-amd64.zip 下载emqx下载地址： 文档地址： 安装部署1. 解压解压 emqx-5.0.26-windows-amd64.zip 到服务器的指定路径，注意：指定路径不能有空格 ,我这里把它解压到了C：&#x2F;emqx 2. 启动通过 cmd 进入 bin 目录下执行启动命令 通过 URL： 访问 EMQX Broker 对其进行配置。默认用户名：admin 密码：public 3. 停止 常用命令查看服务状态 查看报错信息 端口占用 端口配置文档： 查看端口监听 问题处理修改默认 1883 端口etc&#x2F;emqx.conf 修改 UI 18083 端口etc&#x2F;emqx.conf MQTT 客户端MQTTX 全功能 MQTT 客户端工具 下载地址： 下载对应的版本即可 通过客户端可以测试连接到服务端！！！ 至此完成了 MQTT 服务器的搭建！！！ docker 安装EMQX"},{"title":"Springboot集成Quartz定时任务管理器","date":"2024-06-05T16:00:00.000Z","url":"/202406/f54827220ffa.html","tags":[["quartz","/tags/quartz/"],["定时任务","/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["01-Spring学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"Quartz简介 Job 表示一个工作，要执行的具体业务内容。 JobDetail 表示一个具体的可执行的调度程序，Job 是这个可执行程调度程序所要执行的内容，另外 JobDetail 还包含了这个任务调度的方案和策略。 Trigger 代表一个调度参数的配置，什么时候去调。 Scheduler 代表一个调度容器，一个调度容器中可以注册多个 JobDetail 和 Trigger。当 Trigger 与 JobDetail 组合，就可以被 Scheduler 容器调度了。 案例背景系统中有一张自定义的定时任务表，需要实现动态的添加、修改、删除、启停定时任务等功能，定时任务里包含了业务需要执行的按设置周期执行的代码 由于不想使用Quartz的数据存储功能，所以下面实现里直接使用了这张自定义的表，以及使用了Quartz的任务调度和触发功能 实现步骤1. 引入依赖 2. 添加配置类 3. 编写Job类该类就是将来要定时执行的业务代码，具体代码路径根据实际情况规划即可，重点是继承 QuartzJobBean，重写 executeInternal 方法 4. 编写定时任务表的实体类ScheduleLog.java 5. 创建管理定时任务的工具类 6. 项目启动时做任务初始化这里我直接让service实现了CommandLineRunner，然后在run()方法中，将初始化逻辑写入进来，让数据库中的持久化的任务全部添加进内存中。 ScheduleLogService.java 至此基本就实现了定时任务的管理了，controller 里的内容包含了对定时任务进行管理的接口，就不写了 总结 同一个任务是否可以并行执行，可参考第3步设置 每次项目重新部署后，自动加载数据库中的定时任务 Quartz在发生异常时会重试一次，注意异常处理，可在第3步中处理 参考链接： Cron表达式不管是Spring自带的定时任务实现，还是SpringBoot整合Quartz的定时任务实现，其触发器都支持用corn表达式来表示。 corn表达式是一个字符串，有6或7个域，域之间是用空格进行间隔。 从左到右每个域表示的含义如下： 第几个域 英文释义 允许值 备注 一 Seconds 0~59 秒 二 Minutes 0~59 分 三 Hours 0~23 时 四 DayOfMonth 1-31 天 五 Month 1-12或月份简写 月 六 DayOfWeek 1-7或星期简写 星期，1表示SUN，在day-of-week字段用”6#3”指这个月第3个周五（6指周五，3指第3个）。如果指定的日期不存在，触发器就不会触发 七 Year 1970~2099 年 然后，某些域还支持部分特殊字符，特殊字符的含义如下： 特殊字符 含义及注意事项 * 任意值 ? 占位符，只能在第四域和第六域中使用，表示未说明的值，即不关心它为何值 - 区间，表示区间内有效 &#x2F; 固定间隔，符号前表示开始时间，符号后表示每次递增的值； , 枚举有效值的间隔符，表示附加一个可能值 L 表示该区间的最后一个有效值，只能在第四域和第六域中使用， L(“last”) (“last”) “L” 用在day-of-month字段意思是 “这个月最后一天”；用在 day-of-week字段, 它简单意思是 “7” or “SAT”。 如果在day-of-week字段里和数字联合使用，它的意思就是 “这个月的最后一个星期几” – 例如： “6L” means “这个月的最后一个星期五”. 当我们用“L”时，不指明一个列表值或者范围是很重要的，不然的话，我们会得到一些意想不到的结果。 W 表示离指定日期的最近的有效工作日，（周一-周五为工作日），W(“weekday”) 只能用在day-of-month字段。用来描叙最接近指定天的工作日（周一到周五）。例如：在day-of-month字段用“15W”指“最接近这个月第15天的工作日”，即如果这个月第15天是周六，那么触发器将会在这个月第14天即周五触发；如果这个月第15天是周日，那么触发器将会在这个月第16天即周一触发；如果这个月第15天是周二，那么就在触发器这天触发，注意一点：这个用法只会在当前月计算值，不会越过当前月。“W”字符仅能在day-of-month指明一天，不能是一个范围或列表。也可以用“LW”来指定这个月的最后一个工作日。 常用corn表达式例子含义说明： corn表示式 表达式含义 *&#x2F;10 * * * * ? * 每隔10秒执行一次 0 30 1 * * ? * 每天凌晨1点30分0秒开始执行 0 0 10,14,16 * * ? 每天10点、14点、16点执行一次 0 15 10 L * ? 每个月最后一天的10点15分执行一次 0 15 10 ? * 6L 每月的最后一个星期五上午10:15触发 0 15 10 15 * ? 每月15日上午10:15触发 0 15 10 ? * 6#3 每月的第三个星期五上午10:15触发 0 15 10 ? * 6L 2018-2020 2018年到2020年每个月最后一个星期五的10:15执行 0 0&#x2F;2 8,9,10,11,12,15,16,17,18 ? * 2,3,4,5,6,7 周一至周六，每天8点至11点，14点至18点，每隔2分钟执行一次 校验地址："},{"title":"Springboot代码中判断是否生产环境","date":"2024-06-03T16:00:00.000Z","url":"/202406/1896221cf1f1.html","tags":[["Springboot","/tags/Springboot/"],["配置","/tags/%E9%85%8D%E7%BD%AE/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["01-Spring学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"s 思路： 把系统的环境变量注入 工具类源码： 使用： "},{"title":"Springboot读取自定义的yml配置文件","date":"2024-06-03T16:00:00.000Z","url":"/202406/0540bec94519.html","tags":[["自定义yml","/tags/%E8%87%AA%E5%AE%9A%E4%B9%89yml/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["01-Spring学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"在开发中经常会遇到读取自定义的yml配置文件 第一步：添加配置类 第二步：添加实体类，用来获取配置 第三步：注入实体，使用 @Resource 和 @Autowired 在java代码中使用@Autowired或@Resource注解方式进行装配，这两个注解的区别是：@Autowired 默认按类型装配，@Resource默认按名称装配，当找不到与名称匹配的bean才会按类型装配"},{"title":"Jenkins实现自动化部署","date":"2024-05-27T16:00:00.000Z","url":"/202405/b85230591bb1.html","tags":[["Jenkins","/tags/Jenkins/"],["持续集成","/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"],["自动化部署","/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["Web服务器部署","/categories/%E5%AE%9E%E6%88%98/Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"]],"content":"安装 插件管理插件地址替换： 在容器内安装mvn工具 参考连接：Maven的安装与配置 给容器中的mvn命令设置软连接 stop.bat start.bat restart.bat 这个是后端自动脚本 实际环境调整 服务名称和操作目录即可 回滚脚本设置 deploy.bat 这个是前端自动部署脚本 详细步骤新建任务输入任务名称，选择：构建一个自由风格的软件项目 ，确定 配置General 勾选：参数化构建过程 添加参数-》选项参数 添加参数-》字符参数 源码管理填写代码远程仓库地址 构建触发器可以不选，不选的话，需要手动构建 构建环境不选 Build Steps选择执行 shell ,配置下面的命令 注意：这里的参数，$deploy_env 要与第一步General里配置的参数一致 构建后操作第一步：增加构建后操作步骤-》归档成品 内容填写：target&#x2F;*.jar 选择高级-》勾选：只有构建成功时归档 第二步：增加构建后操作步骤-》Send build artifacts over SSH 选择 SSH Server中配置好的 Name，相当于是实际的服务器（最终代码部署所在的服务器） 这一步的意思是要把构建好的jar包通过ssh publishers 传到部署服务器上 设置源地址、目标地址以及在目标服务器上执行的命令 注意：在目标服务器上执行的指令需要采用全路径（上面的第四步在生产环境有问题），例如直接填写即可：C:&#x2F;JavaWorkspace&#x2F;restart.bat docker 容器安装nvm在 jenkins 的容器内安装nvm 由于jenkins容器默认用户是jenkins，且没有用户根目录，安装完nvm后，无法使用设置环境变量，当前把环境变量设置在了 &#x2F;etc&#x2F;bash.bashrc 在这个文件末尾追加即可 安装 node2024年8月23日，突然发现jenkins里 全局工具配置 中配置的NodeJS 自动安装不行了，因为访问不到nodejs.org这个站了，所以只能手动下载安装了 下载地址： 下载好后，把这个包解压到指定目录下，我这里是放在了 &#x2F;var&#x2F;jenkins_home&#x2F;tools&#x2F;jenkins.plugins.nodejs.tools.NodeJSInstallation&#x2F;Node_17.9.1 这个目录 然后配置安装目录即可！ "},{"title":"Windows 服务器安装 OpenSSH 服务","date":"2024-05-27T16:00:00.000Z","url":"/202405/2a476d867a41.html","tags":[["Windows服务器","/tags/Windows%E6%9C%8D%E5%8A%A1%E5%99%A8/"],["OpenSSH","/tags/OpenSSH/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["Windows服务器","/categories/%E5%AE%9E%E6%88%98/Windows%E6%9C%8D%E5%8A%A1%E5%99%A8/"]],"content":"首先要确定自己的服务器是否支持安装openssh，下面是具体步骤 参考连接："},{"title":"Nginx服务器做代理服务器","date":"2024-04-29T16:00:00.000Z","url":"/202404/af90b0421e68.html","tags":[["nginx","/tags/nginx/"],["代理","/tags/%E4%BB%A3%E7%90%86/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["Web服务器部署","/categories/%E5%AE%9E%E6%88%98/Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"]],"content":"问题如何通过nginx代理实现，从另一台电脑访问本地部署的开发环境项目 解决1. 下载nginx服务软件 2. 进行配置找到目录 conf，里面有文件 nginx.conf。可以通过这个文件配置Nginx。 3. 启动服务 配置首先我们要了解nginx进行转发代理的核心在于两处，一是入口，二是出口； 入口就是url路径匹配识别对应的路径， 出口就是转发映射对应的后台服务地址 在nginx的配置文件中通过location配置路由转发规则，配置语法如下： 中括号中为路由匹配符号，常见的有： &#x3D;：精确匹配 ^~：模糊前缀匹配 ~：区分大小写的正则匹配 ~*：不区分大小写的正则匹配 &#x2F;uri：普通前缀匹配 &#x2F;：通用匹配 精确匹配例子： 前缀模糊匹配例子： 无符号的精确匹配例子： 区分大小写的正则匹配进行uri的模糊匹配，区分大小写，匹配到后不再进行其他匹配 例子1： 例子2： 不区分大小写的正则匹配进行uri的模糊匹配，不区分大小写，匹配到后不再进行其他匹配 反向代理配置反向代理是指代理服务器接收互联网上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给互联网上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器 proxy_pass是Nginx中的一个重要指令，它属于Nginx的HTTP代理模块。 proxy_pass 的主要作用是设置代理服务器的地址，实现 反向代理 功能 示例： 这个配置表示，当用户访问例如  的时候，Nginx 会在后台将请求转发到 ，并将从那里得到的响应返回给用户 路径转发location匹配路径末尾没有 &#x2F;此时proxy_pass后面的路径必须拼接location的路径 外面访问： 相当于访问： location匹配路径末尾有 &#x2F;此时proxy_pass后面的路径需要分为以下四种情况讨论 情况1：proxy_pass后面的路径只有域名且最后没有 &#x2F; 外面访问： 相当于访问： 情况2：proxy_pass后面的路径只有域名同时最后有 &#x2F; 外面访问： 相当于访问： 情况3：proxy_pass后面的路径还有其他路径但是最后没有 &#x2F; 外面访问： 相当于访问： 情况4：proxy_pass后面的路径还有其他路径同时最后有 &#x2F; 外面访问： 相当于访问："},{"title":"mysql navicat 自动执行定时任务/事件","date":"2024-04-29T16:00:00.000Z","url":"/202404/e801f08789ed.html","tags":[["定时任务","/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"],["mysql事件","/tags/mysql%E4%BA%8B%E4%BB%B6/"],["自动执行","/tags/%E8%87%AA%E5%8A%A8%E6%89%A7%E8%A1%8C/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["Mysql服务器","/categories/%E5%AE%9E%E6%88%98/Mysql%E6%9C%8D%E5%8A%A1%E5%99%A8/"]],"content":"查看mysql是否开启了定时任务 查看event_scheduler如果为OFF或0就表示关闭 这个时候，如果重启了mysql服务，发现 event_scheduler 又成 off 了，所以需要在mysql的配置文件my.ini中进行配置 只需要在my.ini配置文件的**[mysqld]部分加上event_scheduler&#x3D;ON** 即可 参考链接："},{"title":"Springboot环境下java调用c语言生成的动态链接库文件","date":"2024-04-24T16:00:00.000Z","url":"/202404/c37ea3024ebb.html","tags":[["JNI","/tags/JNI/"],["DLL","/tags/DLL/"],["so","/tags/so/"],["动态链接库","/tags/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["09-java相关笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/09-java%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"]],"content":"背景在项目中要求部分算法程序必须使用 C 或 C++ 进行开发，而项目使用的是 Java 程序，框架是Springboot，好在java中提供了JNI机制，允许 Java 代码调用本地（Native）代码，比如 C 或 C++ 编写的代码 基本流程生成JNI头文件用于链接动态链接库 编写一个Java类 AddJni.java 执行javah命令，生成 .h文件，为了链接 c 程序所用 编写本地 C 语言方法的代码 在 项目&#x2F;src&#x2F;main&#x2F;resources&#x2F;native 目录下新建一个 add.c 文件 注意这个 C 文件里方法的名称必须和头文件 net_xxx_jni_AddJni.h 中的方法名称完全一致 生成动态链接库文件 .so 或者 .dll 结尾的文件，.so 实在 Linux 系统下使用，.dll 是在 Windows 系统下使用 加载本地库 在 util 包下建一个 NativeLoader 类用来加载库文件，这个类是网上找的 在需要用的地方调用加载方法加载一下 调用本地方法 参考链接   安装gcc"},{"title":"Arthas的使用","date":"2024-04-22T16:00:00.000Z","url":"/202404/9df34319e46f.html","categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["09-java相关笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/09-java%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"]],"content":"背景：项目采用的 Springboot + docker部署 的方式，需要在线排查问题 Arthas 官网地址： 简介Arthas 是一款线上监控诊断产品，通过全局视角实时查看应用 load、内存、gc、线程的状态信息，并能在不修改应用代码的情况下，对业务问题进行诊断，包括查看方法调用的出入参、异常，监测方法执行耗时，类加载信息等，大大提升线上问题排查效率 使用将下载的 arthas 包导入到 docker 容器内 启动 常用命令jad反编译指定已加载类的源码，可以查看代码是否更新正确了 thread查看当前线程信息，查看线程的堆栈 trace可以用来排查性能问题，由于命令难写，可以在IDEA中安装 arthas 插件 watch能方便的观察到指定函数的调用情况，比如说入参、返回值，相当于本地的debug tt方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测 "},{"title":"Springboot 集成 WebSocket","date":"2024-04-22T16:00:00.000Z","url":"/202404/3f96fa1fe4a8.html","tags":[["WebSocket","/tags/WebSocket/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["01-Spring学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"引入依赖 创建 WebSocketConfig 配置类WebSocketConfig.java 创建 WebSocketServer 工具类WebSocketServer.java 创建测试接口 测试WebSocketServer测试地址： 前端测试 参考链接： 扩展带参数的websocket地址"},{"title":"智博热电智慧大屏项目部署","date":"2024-04-21T16:00:00.000Z","url":"/202404/382ee04ec34e.html","categories":[["工作","/categories/%E5%B7%A5%E4%BD%9C/"]],"content":"后端Docker方式部署采用 docker 容器化技术进行部署 数据库服务搭建创建my.cnf 创建正式容器 配置远程登录用户 打包步骤编写Dockerfile 具体步骤 注意：项目中的 application.yml 和 dataUnit.properties 可在 jar 包同级目录下的config目录下进行配置，无需重新打包 Windows 服务器部署安装jdk下载地址： 通过java -jar 命令部署通过这种方式部署用来确定部署成功了 调试：若发现数据库服务无法连接导致部署失败，可通过在app.jar同级目录下新建config目录，在config目录下新建application.yml配置文件，通过修改数据库的配置项来进行调整 服务模式部署SpringBoot部署指导里推荐使用winsw下载地址： 步骤 将下载下来的 WinSW-x64.exe 改名 winserve.exe 编写配置文件 winserve.xml 注意： 标签中的app.jar的所在路径配置成实际地址 安装服务 注意：如果不想要这个服务了，可以通过以下命令进行删除 查看服务并启动运行-》services.msc找到一个叫 “智博热电智慧大屏接口服务” 的服务，启动即可 部署接口服务参考连接： 开放8081端口参考连接： 前端Nginx服务搭建 下载Nginx1.22的docker镜像： 先运行一次容器（为了拷贝配置文件）： 将容器内的配置文件拷贝到指定目录： 修改文件名称： 终止并删除容器： 使用如下命令启动Nginx服务： 代码更新操作后端将jar包传至宿主机的共享目录zbrd，然后重启容器 前端将代码传至html目录即可"},{"title":"Springboot 集成 swagger","date":"2024-04-17T16:00:00.000Z","url":"/202404/a9a19b3700e7.html","tags":[["Springboot","/tags/Springboot/"],["接口文档生成","/tags/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/"],["swagger","/tags/swagger/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["01-Spring学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"引入pom.xml 增加配置类配置类 配置文件 常用注解@Api 将类标记为Swagger资源。默认情况下，Swagger Core将只包括和内省使用@Api注释的类，并将忽略其他资源（JAX-RS端点、Servlet等） @Tag 注释可以应用于类或方法 @ApiOperation 描述针对特定路径的操作，通常是HTTP方法。具有等效路径的操作被分组在单个操作对象中。HTTP方法和路径的组合创建了一个唯一的操作 @ApiParam 为操作参数添加其他元数据 @ApiModelProperty 添加和操作模型特性的数据。 报错处理 Failed to start bean ‘documentationPluginsBootstrapper’ 参考链接： 参考链接： 方案一：添加配置项（治标） 方案二：在项目里添加这个 bean ：（加在配置类里就可）(治本)，没试 修改swagger的日志级别，用来屏蔽”swagger中整型参数无法设置默认值WARN提示”问题 "},{"title":"Springboot 请求处理常用参数注解总结","date":"2024-04-11T16:00:00.000Z","url":"/202404/6f5e423aa057.html","categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["01-Spring学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"注意：GET请求一般采用 RequestParam 接收，POST请求一般采用 RequestBody 接收，前端传参时，设置ContentType &#x3D; “application&#x2F;json” 路径变量@PathVariable 获取请求头@RequestHeader 获取请求参数@RequestParam 获取Cookie值@CookieValue 获取Request域属性@RequestAttribute 获取请求体@RequestBody 矩阵变量@MatrixVariable "},{"title":"Maven的安装与配置","date":"2024-04-07T16:00:00.000Z","url":"/202404/15e9783b8316.html","tags":[["Maven","/tags/Maven/"]],"categories":[["开发工具","/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"],["Maven","/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Maven/"]],"content":"前置环境 windows 10 jdk 1.8 Maven 下载 或者  Maven 的安装与配置 解压至非中文无空格目录，比如：D:\\Programs Windows下的环境变量配置 环境变量 ， 1）名称：M2_HOME 值：D:\\Programs\\apache-maven-3.9.6 2）Path里追加：%M2_HOME%\\bin 验证maven是否可用，打开cmd , 输入命令：mvn -v MAC下的环境变量配置在终端打开配置环境变量到文件： 1）在终端输入 vim ~&#x2F;.bash_profile，进入到环境变量配置文件里面； 2）进入后，是read模式，按下 i (编辑)键，进入insert模式； 3）将环境变量加入其实，环境变量如下： export MAVEN_HOME&#x3D;&#x2F;Users&#x2F;mac&#x2F;maven&#x2F;apache-maven-3.8.1 export PATH&#x3D;$PATH:$MAVEN_HOME&#x2F;bin 4）按下 ESC，退出insert模式； 5）输入 :wq (保存修改)退出当前文件； 6）使修改的环境变量bash_profile文件生效，输入 source ~&#x2F;.bash_profile，按下Enter键即可. setting.xml配置文件设置maven的安装包中conf文件夹下的setting.xml文件指定正确的仓库 配置本地仓库位置 ​ 1）打开 D:\\Programs\\apache-maven-3.9.6\\conf\\settings.xml ​ 2）把注释中的 &#x2F;path&#x2F;to&#x2F;local&#x2F;repo 复制出来，修改路径：D:&#x2F;mvn_repository ，大概在 53行 左右 配置阿里云镜像加速 ​ 1）查看配置指南  ​ 2）打开 D:\\Programs\\apache-maven-3.9.6\\conf\\settings.xml ​ 3）复制下面的代码到 标签里,大概在 159行 左右 配置 jdk 版本 ​ 1）打开 D:\\Programs\\apache-maven-3.9.6\\conf\\settings.xml ​ 2）复制下面的代码到 标签里，大概在 196行 左右 IDEA中配置Maven插件 打开设置-》构建、执行、部署-》构建工具-》Maven 配置 Maven 主路径，用户配置文件、本地仓库 "},{"title":"局域网组建","date":"2024-04-06T16:00:00.000Z","url":"/202404/ff22069f6cb4.html","tags":[["内网穿透","/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"],["tailscale","/tags/tailscale/"],["局域网组建","/tags/%E5%B1%80%E5%9F%9F%E7%BD%91%E7%BB%84%E5%BB%BA/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["实用方法","/categories/%E6%9D%82%E6%96%87/%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95/"]],"content":"很多人在下班回家后，可以在家通过连接公司的VPN，进而可以访问公司内部的一些系统、数据库等，非常方便。但是如果是个人，在外地出差或是在公司需要访问家里的电脑和NAS(或者公司没有提供VPN)，就非常麻烦了–因为家里的宽带一般没有公网IP，无法直接访问。 简介官网：tailscale.com 步骤 在需要组网的设备上安装一个客户端，访问官网下载安装即可 所有客户端登录同一个账号，账号有几个固定选项，不能注册（谷歌账号、微软账号、Github账号、苹果账号），哪个合适用那个即可 登录后就可以看到分配的固定IP地址了 补充 可以把某台计算机当作服务器来使用，搭建网站、开设ftp服务等 实现内网穿透 "},{"title":"智博热电管控平台部署","date":"2024-04-06T16:00:00.000Z","url":"/202404/4ae73da03f69.html","tags":[["管控平台","/tags/%E7%AE%A1%E6%8E%A7%E5%B9%B3%E5%8F%B0/"]],"categories":[["工作","/categories/%E5%B7%A5%E4%BD%9C/"],["部署","/categories/%E5%B7%A5%E4%BD%9C/%E9%83%A8%E7%BD%B2/"]],"content":"数据库数据库版本： MySQL-5.7.26 数据库相关配置 mysql.ini 配置完成后，直接导入即可 PHP版本下载phpstudy_pro安装，php版本5.6.9nts ,配置网站根目录：cp-zhiboredian-net&#x2F;web 伪静态配置 代码数据库配置文件cp-zhiboredian-net&#x2F;app&#x2F;config&#x2F;parameters.yml 登录密码判断cp-zhiboredian-net&#x2F;src&#x2F;AppBundle&#x2F;Handler&#x2F;AuthenticationProvider.php 密码重置逻辑 项目首页Controller 路由加载机制EduSoho 是基于 Symfony 框架的开源在线教育平台，因此它的配置文件加载顺序在很大程度上继承了 Symfony 框架的机制。不过，EduSoho 本身也有其特定的加载机制和配置文件结构。以下是 EduSoho 中配置文件的加载顺序及机制的概述： 1. 核心框架配置加载 app/config/config.yml 这是 EduSoho 的主配置文件，通常是 Symfony 的 app/config/config.yml 文件。它包含了应用程序的全局配置，如数据库连接、服务、参数等。 此文件会首先加载，并作为所有其他配置的基础。 app/config/parameters.yml 包含应用程序中用到的全局参数，如数据库连接的凭据、邮件服务的配置等。parameters.yml 文件通常通过安装时的参数定义生成。 这个文件也在早期阶段加载，以便在其他配置文件中使用参数。 2. 插件与模块的配置加载 src/ 目录中的模块 EduSoho 中的插件和模块通常位于 src/ 目录下。每个插件或模块可能都有自己的配置文件，通常位于模块目录下的 Resources/config/ 中。 这些配置文件会在 app/config/config.yml 加载之后，根据模块的定义顺序依次加载。 src/ 目录中的插件的路由配置 各插件的路由配置文件通常位于 src/PluginName/Resources/config/routing.yml 或 routing.php 中。它们的加载顺序依据插件的初始化顺序决定，通常在核心应用的路由加载之后。 3. 环境特定的配置加载 app/config/config_&#123;environment&#125;.yml 与 Symfony 类似，EduSoho 也支持环境特定的配置。例如，config_dev.yml 用于开发环境，config_prod.yml 用于生产环境。 这些文件会在全局配置加载后加载，并覆盖全局配置中的相关设置。 4. 服务配置 services.yml 与 services_&#123;environment&#125;.yml 类似于 Symfony，EduSoho 中的服务配置文件也会在配置加载的较晚阶段被加载。这些文件用于定义和配置服务容器中的服务，通常位于 app/config/services.yml 中。 环境特定的服务配置文件（如 services_dev.yml）会覆盖默认的服务配置。 5. 路由配置 app/config/routing.yml EduSoho 使用 Symfony 的路由配置机制。routing.yml 文件通常是核心应用路由的入口点。所有插件和模块的路由会被合并到主路由配置中。 路由配置文件通常在所有服务和配置加载之后加载，以确保路由可以依赖其他已加载的服务。 6. 插件的优先级与加载顺序 插件的加载顺序通常由 AppKernel.php 文件中的 registerBundles() 方法定义。如果需要控制插件的加载顺序，可以在这里调整。 插件中的配置会覆盖之前加载的核心配置，确保插件能够根据需要自定义和扩展平台功能。 总结 全局配置文件 (config.yml, parameters.yml) 最早加载，提供应用程序的基础配置。 插件与模块配置 依次加载，允许自定义和扩展平台功能。 环境特定配置 在全局配置之后加载，并根据运行环境进行配置覆盖。 服务和路由配置 在所有其他配置加载完成后加载，确保可以依赖所有已加载的服务和配置。 例子 这个路由配置段落定义了一个名为 crm_contract 的路由，它包含了路径、默认控制器及方法的设定。下面是对每个配置项的详细解释： 路由名称：crm_contract 定义: crm_contract 是该路由的唯一标识符。在应用程序的其他地方可以通过这个名称来引用该路由，例如在生成 URL 时。 作用: 路由名称在配置文件中是唯一的，用来区分不同的路由。 path: /crm/contract 定义: path 指定了这个路由的 URL 路径为 /crm/contract。 作用: 当用户在浏览器中访问  时，该路径会触发对应的控制器操作。这个路径是用户访问应用程序时看到的 URL 部分。 defaults: &#123; _controller: CustomBundle:Crm/Contract:list &#125; 定义: defaults 配置中定义了该路由的默认控制器及方法。在这里，_controller 是 Symfony 的特殊参数，用来指定处理该路由的控制器和方法。 具体解释: CustomBundle: 指定了该控制器所在的 bundle，通常是应用程序中的一个模块或功能包。 Crm/Contract: 指定了控制器的名称。在 Symfony 中，控制器通常以 Controller 作为后缀，实际上这里指定的是 Crm/ContractController。 list: 指定了控制器中的一个方法，通常以 Action 作为后缀。这个方法处理用户对 /crm/contract 路径的请求。在这个例子中，实际上调用的可能是 listAction 方法。 作用: 当用户访问 /crm/contract 路径时，Symfony 会调用 CustomBundle 中的 Crm/ContractController 控制器的 listAction 方法来处理该请求。 综合理解 当用户访问 /crm/contract 路径时，Symfony 会查找到名为 crm_contract 的路由，并将请求映射到 CustomBundle 的 Crm/ContractController 控制器的 listAction 方法。这意味着该路径对应的业务逻辑将在这个控制器方法中处理，通常会返回一个视图或执行某种逻辑操作。 例如，这个路由可能用于显示 CRM 合同列表的页面。当访问  时，listAction 方法会被调用，可能会从数据库中检索合同数据并将其显示在网页上。 config.yml 解析这个 config.yml 文件是一个典型的 Symfony 框架配置文件，特别是针对 EduSoho 平台的自定义配置。这个文件定义了框架的各种设置，包括服务、路由、模板引擎、会话管理、资源版本控制等。以下是对每个部分的解析 1. imports imports 部分用于引入其他 YAML 配置文件，以便将它们的内容加载到当前配置中。这里引用了三个文件：per.yml、tyjh_yht_global.yml 和 services.yml。其中 @CustomBundle 表示在 CustomBundle 包中的相对路径。 2. framework framework 部分配置了 Symfony 框架的核心功能： translator: 配置翻译服务，fallback 为默认语言。 secret: 用于生成安全令牌等的密钥。 router: 定义路由配置文件的位置，这里使用了 routing.yml。 form, csrf_protection, validation: 控制表单、CSRF 保护和验证功能。 templating: 配置模板引擎，这里使用了 twig。 session: 配置会话服务的处理器。 assets: 配置静态资源的版本控制，确保资源更新时浏览器能正确加载新版本。 3. bazinga_js_translation 配置 bazinga_js_translation，这是一个用于前端 JavaScript 国际化的插件，指定了默认的语言和域。 4. twig twig 部分配置了模板引擎 Twig： debug 和 strict_variables 与调试模式相关。 paths 定义了模板路径，并为每个路径指定了命名空间。 5. parameters parameters 定义了一些全局参数： app.locales 指定了可用语言。 topxia.disk.* 和 topxia.upload.* 配置了文件存储的路径。 permission.path_regular_expression 指定了权限路径的正则表达式。 router.options.matcher_dumper_class 和 security.authentication.provider.dao.class 是自定义的类，用于扩展路由匹配和认证提供者。 6. services services 部分定义了一些服务： assets.path_package 和 assets.static_version_strategy 是静态资源处理的服务。 session.handler.pdo 和 session.handler.redis 是会话存储处理器。 topxia.twig.* 系列是与 Twig 模板缓存相关的服务。 permission.admin_voter 和 permission.twig.permission_extension 处理权限验证。 routing.loader.yml 是自定义的 YAML 路由加载器。 数据库$this-&gt;db() 的使用场景$this-&gt;db() 是一个用于访问数据库连接的快捷方法，通常在 DAO（数据访问对象）层使用。它返回一个数据库连接实例，允许你直接执行 SQL 查询，而不必通过 Doctrine ORM。这个方法是 EduSoho 框架特有的，方便开发者在需要时直接操作数据库。 常用方法以下是 $this-&gt;db() 返回的连接对象的一些常用方法： fetchAll($sql, $params): 执行查询并返回所有结果。 fetchAssoc($sql, $params): 执行查询并返回一个关联数组，其中键为第一列的值，值为整行数据。 fetchColumn($sql, $params): 执行查询并返回单个列的值。 executeUpdate($sql, $params): 执行更新查询（如 INSERT, UPDATE, DELETE），返回受影响的行数。 beginTransaction(): 开始一个数据库事务。 commit(): 提交当前事务。 rollBack(): 回滚当前事务。 模板dump函数的使用 path 函数使用 模态框的使用 竖线的使用竖线表示参数传递 自定义方法比如：上个例子中的 get_emp_name 在哪里定义？说到这个问题需要先对app&#x2F;config&#x2F;config.yml的作用有所了解，可参考config.yml解析一节 第一步：在config.yml中自定义一个扩展 第二步：新建一个文件 src&#x2F;CustomBundle&#x2F;Twig&#x2F;CusExtension.php 这个 PHP 类 CusExtension 是一个自定义的 Twig 扩展类，用于在 Twig 模板中引入自定义的过滤器和函数。它继承自 \\Twig_Extension，并使用了 Symfony 服务容器和 ServiceKernel 来获取和调用项目中的服务。以下是对该类的详细解析 Twig 过滤器 getFilters() 方法：这个方法定义了一个自定义的 Twig 过滤器 get_com_name。当在 Twig 模板中使用 &#123;&#123; some_variable | get_com_name &#125;&#125; 时，将调用类中的 getComNameById 方法。 Twig 函数 getFunctions() 方法：这个方法定义了一个自定义的 Twig 函数 getProjectName。当在 Twig 模板中使用 &#123;% set name = getProjectName(projectId) %&#125; 时，将调用类中的 getProjectName 方法。 获取项目服务 getEduProjectService() 方法：该方法通过 ServiceKernel 获取并返回一个名为 EduProjectService 的服务实例，这是一个处理教育项目相关逻辑的服务。 注意：当多个扩展类中存在同名方法时，以扩展类在config.yml中定义的顺序为准，优先执行后面定义的 for循环在 Twig 模板中，for 循环用于遍历数组或对象，类似于其他编程语言中的 for 循环。下面是一些常见的用法示例： 1. 基本的 for 循环 解释：items 是一个数组或对象。循环遍历每个 item，并在模板中显示。 2. 带索引的 for 循环 解释：此例中，key 是数组的索引或对象的键，item 是对应的值。可以在循环中同时使用键和值。 3. 循环中的控制语句 解释 loop 是 Twig 提供的一个特殊变量，包含以下属性： loop.index：当前循环的索引，从1开始。 loop.index0：当前循环的索引，从0开始。 loop.revindex：从最后一个开始的索引，从1开始。 loop.revindex0：从最后一个开始的索引，从0开始。 loop.length：要迭代的项目总数。 loop.first：布尔值，当前是否为第一个项目。 loop.last：布尔值，当前是否为最后一个项目。 4. for 循环与嵌套 解释：可以嵌套 for 循环来处理多维数组或嵌套结构。 5. 处理空数组 解释：当 items 为空时，else 块中的内容会被执行。 6. continue 和 break 解释：continue 跳过当前循环迭代，继续下一次循环；break 结束整个循环。 获取查询参数 比如链接地址是：my&#x2F;project?project_name&#x3D;123 ，则xxx就是project_name，那上面的输出：123 控制器重定向如果你想将用户重定向到另一个页面,请使用 redirectToRoute() 方法： 默认情况下，redirectToRoute()方法执行302（临时）重定向。如果要执行301（永久）重定向，请修改第2个参数： 从定向到外部网站，使用redirect()并传入外部URL： 渲染模板如果你使用HTML，你应该想要去渲染一个模板。render()方法可以用来渲染模板并可以把输出的内容放到你的Response 对象： 模板也可以放置在更深层次的子目录。但应该避免创建不必要的深层结构： Request对象作为一个控制器参数 自定义调试日志方案一（推荐）**Trait ** 位置: src/Common/Traits 或类似的目录 用途: 如果有一些逻辑在多个类中复用，可以考虑使用 PHP 的 trait 机制。 示例： 在类中使用： 方案二直接在类里 补充默认用户初始密码：123456 打包命令 "},{"title":"Mysql常用操作汇总","date":"2024-04-02T16:00:00.000Z","url":"/202404/54be9cddec8e.html","tags":[["mysql","/tags/mysql/"],["mysql常用操作","/tags/mysql%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["Mysql服务器","/categories/%E5%AE%9E%E6%88%98/Mysql%E6%9C%8D%E5%8A%A1%E5%99%A8/"]],"content":"Mysql 常用操作导入 问题timestamp 类型默认‘0000-00-00 00:00:00’ 问题 原因分析：因为 timestamp 类型的取值范围：1970-01-01 00:00:00 到 2037-12-31 23:59:59 处理方法：设置sql_mode my.ini 参考链接： 参考链接： Cannot add foreign key constraint原因分析处理方法"},{"title":"自动拉取代码方案","date":"2024-04-01T16:00:00.000Z","url":"/202404/dff99d8c1aae.html","tags":[["git","/tags/git/"],["自动更新","/tags/%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/"],["定时任务","/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"],["自动拉取","/tags/%E8%87%AA%E5%8A%A8%E6%8B%89%E5%8F%96/"],["定时计划","/tags/%E5%AE%9A%E6%97%B6%E8%AE%A1%E5%88%92/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["Web服务器部署","/categories/%E5%AE%9E%E6%88%98/Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"]],"content":" 参考链接： 简介需要在一台windows操作系统的服务器上搭建公司项目的测试环境，后端接口是php，前端是vue，目前有一台空置的电脑，目标是：在这台空置电脑上搭建运行环境，且能自动同步开发代码 准备工作PHP运行环境：Phpstudy_pro Vue运行环境：nvm 、node (16.20.2)、npm 代码管理工具：Git 自动拉取脚本： auto_update_code.bat D: 表示进入D盘 cd \\code\\zb-three-js 表示进入D:\\code\\zb-three-js目录 git pull 拉取命令 隐藏黑弹窗脚本： run.vbs 其中D:&#x2F;code&#x2F;auto_update_code.bat 表示bat所在的路径 vbhide 表示隐藏执行 详细步骤安装软件Phpstudy_pro、Git、nvm、node 拉取代码通过给定的仓库把代码拉到本地，并完成本地运行配置 配置定时更新 把 auto_update_code.bat 、run.vbs 脚本放到代码同级目录下即可 通过cmd执行下面的命令表示任务就创建成功了 然后打开windows的“任务计划程序”，就可以看到刚才创建的那一条。如果不想用命令执行，也可以去“任务计划程序”界面化创建。 计算机管理-》任务计划程序-》创建基本任务 扩展windows server上的定时任务配置 设置任务 检查任务 删除任务"},{"title":"Maven最佳实践","date":"2024-03-24T16:00:00.000Z","url":"/202403/d7a9cbb9e632.html","tags":[["Maven坐标","/tags/Maven%E5%9D%90%E6%A0%87/"],["Maven仓库","/tags/Maven%E4%BB%93%E5%BA%93/"],["Maven生命周期","/tags/Maven%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"],["Maven多模块管理","/tags/Maven%E5%A4%9A%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86/"]],"categories":[["开发工具","/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"],["Maven","/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Maven/"]],"content":" 本文由 JavaGuide 翻译并完善，原文地址： 。 Maven 是一种广泛使用的 Java 项目构建自动化工具。它简化了构建过程并帮助管理依赖关系，使开发人员的工作更轻松。Maven 详细介绍可以参考我写的这篇 Maven 核心概念总结 。 这篇文章不会涉及到 Maven 概念的介绍，主要讨论一些最佳实践、建议和技巧，以优化我们在项目中对 Maven 的使用并改善我们的开发体验。 Maven 标准目录结构Maven 遵循标准目录结构来保持项目之间的一致性。遵循这种结构可以让其他开发人员更轻松地理解我们的项目。 Maven 项目的标准目录结构如下： src/main/java：源代码目录 src/main/resources：资源文件目录 src/test/java：测试代码目录 src/test/resources：测试资源文件目录 这只是一个最简单的 Maven 项目目录示例。实际项目中，我们还会根据项目规范去做进一步的细分。 指定 Maven 编译器插件默认情况下，Maven 使用 Java5 编译我们的项目。要使用不同的 JDK 版本，请在 pom.xml 文件中配置 Maven 编译器插件。 例如，如果你想要使用 Java8 来编译你的项目，你可以在&lt;build&gt;标签下添加以下的代码片段： 这样，Maven 就会使用 Java8 的编译器来编译你的项目。如果你想要使用其他版本的 JDK，你只需要修改&lt;source&gt;和&lt;target&gt;标签的值即可。例如，如果你想要使用 Java11，你可以将它们的值改为 11。 有效管理依赖关系Maven 的依赖管理系统是其最强大的功能之一。在顶层 pom 文件中，通过标签 dependencyManagement 定义公共的依赖关系，这有助于避免冲突并确保所有模块使用相同版本的依赖项。 例如，假设我们有一个父模块和两个子模块 A 和 B，我们想要在所有模块中使用 JUnit 5.7.2 作为测试框架。我们可以在父模块的pom.xml文件中使用&lt;dependencyManagement&gt;标签来定义 JUnit 的版本： 在子模块 A 和 B 的 pom.xml 文件中，我们只需要引用 JUnit 的 groupId 和 artifactId 即可: 针对不同环境使用配置文件Maven 配置文件允许我们配置不同环境的构建设置，例如开发、测试和生产。在 pom.xml 文件中定义配置文件并使用命令行参数激活它们： 使用命令行激活配置文件： 保持 pom.xml 干净且井然有序组织良好的 pom.xml 文件更易于维护和理解。以下是维护干净的 pom.xml 的一些技巧： 将相似的依赖项和插件组合在一起。 使用注释来描述特定依赖项或插件的用途。 将插件和依赖项的版本号保留在 &lt;properties&gt; 标签内以便于管理。 使用 Maven WrapperMaven Wrapper 是一个用于管理和使用 Maven 的工具，它允许在没有预先安装 Maven 的情况下运行和构建 Maven 项目。 Maven 官方文档是这样介绍 Maven Wrapper 的： The Maven Wrapper is an easy way to ensure a user of your Maven build has everything necessary to run your Maven build. Maven Wrapper 是一种简单的方法，可以确保 Maven 构建的用户拥有运行 Maven 构建所需的一切。 Maven Wrapper 可以确保构建过程使用正确的 Maven 版本，非常方便。要使用 Maven Wrapper，请在项目目录中运行以下命令： 此命令会在我们的项目中生成 Maven Wrapper 文件。现在我们可以使用 ./mvnw （或 Windows 上的 ./mvnw.cmd）而不是 mvn 来执行 Maven 命令。 通过持续集成实现构建自动化将 Maven 项目与持续集成 (CI) 系统（例如 Jenkins 或 GitHub Actions）集成，可确保自动构建、测试和部署我们的代码。CI 有助于及早发现问题并在整个团队中提供一致的构建流程。以下是 Maven 项目的简单 GitHub Actions 工作流程示例： 利用 Maven 插件获得附加功能有许多 Maven 插件可用于扩展 Maven 的功能。一些流行的插件包括（前三个是 Maven 自带的插件，后三个是第三方提供的插件）： maven-surefire-plugin：配置并执行单元测试。 maven-failsafe-plugin：配置并执行集成测试。 maven-javadoc-plugin：生成 Javadoc 格式的项目文档。 maven-checkstyle-plugin：强制执行编码标准和最佳实践。 jacoco-maven-plugin: 单测覆盖率。 sonar-maven-plugin：分析代码质量。 …… jacoco-maven-plugin 使用示例： 如果这些已有的插件无法满足我们的需求，我们还可以自定义插件。 探索可用的插件并在 pom.xml 文件中配置它们以增强我们的开发过程。 总结Maven 是一个强大的工具，可以简化 Java 项目的构建过程和依赖关系管理。通过遵循这些最佳实践和技巧，我们可以优化 Maven 的使用并改善我们的 Java 开发体验。请记住使用标准目录结构，有效管理依赖关系，利用不同环境的配置文件，并将项目与持续集成系统集成，以确保构建一致。"},{"title":"Maven核心概念总结","date":"2024-03-24T16:00:00.000Z","url":"/202403/a2e8e2f46232.html","tags":[["Maven坐标","/tags/Maven%E5%9D%90%E6%A0%87/"],["Maven仓库","/tags/Maven%E4%BB%93%E5%BA%93/"],["Maven生命周期","/tags/Maven%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"],["Maven多模块管理","/tags/Maven%E5%A4%9A%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86/"]],"categories":[["开发工具","/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"],["Maven","/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Maven/"]],"content":" 这部分内容主要根据 Maven 官方文档整理，做了对应的删减，主要保留比较重要的部分，不涉及实战，主要是一些重要概念的介绍。 Maven 介绍Maven 官方文档是这样介绍的 Maven 的： Apache Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project’s build, reporting and documentation from a central piece of information. Apache Maven 的本质是一个软件项目管理和理解工具。基于项目对象模型 (Project Object Model，POM) 的概念，Maven 可以从一条中心信息管理项目的构建、报告和文档。 什么是 POM？ 每一个 Maven 工程都有一个 pom.xml 文件，位于根目录中，包含项目构建生命周期的详细信息。通过 pom.xml 文件，我们可以定义项目的坐标、项目依赖、项目信息、插件信息等等配置。 对于开发者来说，Maven 的主要作用主要有 3 个： 项目构建：提供标准的、跨平台的自动化项目构建方式。 依赖管理：方便快捷的管理项目依赖的资源（jar 包），避免资源间的版本冲突问题。 统一开发结构：提供标准的、统一的项目结构。 关于 Maven 的基本使用这里就不介绍了，建议看看官网的 5 分钟上手 Maven 的教程：Maven in 5 Minutes 。 Maven 坐标项目中依赖的第三方库以及插件可统称为构件。每一个构件都可以使用 Maven 坐标唯一标识，坐标元素包括： groupId(必须): 定义了当前 Maven 项目隶属的组织或公司。groupId 一般分为多段，通常情况下，第一段为域，第二段为公司名称。域又分为 org、com、cn 等，其中 org 为非营利组织，com 为商业组织，cn 表示中国。以 apache 开源社区的 tomcat 项目为例，这个项目的 groupId 是 org.apache，它的域是 org（因为 tomcat 是非营利项目），公司名称是 apache，artifactId 是 tomcat。 artifactId(必须)：定义了当前 Maven 项目的名称，项目的唯一的标识符，对应项目根目录的名称。 version(必须)：定义了 Maven 项目当前所处版本。 packaging（可选）：定义了 Maven 项目的打包方式（比如 jar，war…），默认使用 jar。 classifier(可选)：常用于区分从同一 POM 构建的具有不同内容的构件，可以是任意的字符串，附加在版本号之后。 只要你提供正确的坐标，就能从 Maven 仓库中找到相应的构件供我们使用。 举个例子（引入阿里巴巴开源的 EasyExcel）： 你可以在  这个网站上找到几乎所有可用的构件，如果你的项目使用的是 Maven 作为构建工具，那这个网站你一定会经常接触。 Maven 依赖如果使用 Maven 构建产生的构件（例如 Jar 文件）被其他的项目引用，那么该构件就是其他项目的依赖。 依赖配置配置信息示例： 配置说明： dependencies：一个 pom.xml 文件中只能存在一个这样的标签，是用来管理依赖的总标签。 dependency：包含在 dependencies 标签中，可以有多个，每一个表示项目的一个依赖。 groupId,artifactId,version(必要)：依赖的基本坐标，对于任何一个依赖来说，基本坐标是最重要的，Maven 根据坐标才能找到需要的依赖。我们在上面解释过这些元素的具体意思，这里就不重复提了。 type(可选)：依赖的类型，对应于项目坐标定义的 packaging。大部分情况下，该元素不必声明，其默认值是 jar。 scope(可选)：依赖的范围，默认值是 compile。 optional(可选)：标记依赖是否可选 exclusions(可选)：用来排除传递性依赖,例如 jar 包冲突 依赖范围classpath 用于指定 .class 文件存放的位置，类加载器会从该路径中加载所需的 .class 文件到内存中。 Maven 在编译、执行测试、实际运行有着三套不同的 classpath： 编译 classpath：编译主代码有效 测试 classpath：编译、运行测试代码有效 运行 classpath：项目运行时有效 Maven 的依赖范围如下： compile：编译依赖范围（默认），使用此依赖范围对于编译、测试、运行三种都有效，即在编译、测试和运行的时候都要使用该依赖 Jar 包。 test：测试依赖范围，从字面意思就可以知道此依赖范围只能用于测试，而在编译和运行项目时无法使用此类依赖，典型的是 JUnit，它只用于编译测试代码和运行测试代码的时候才需要。 provided：此依赖范围，对于编译和测试有效，而对运行时无效。比如 servlet-api.jar 在 Tomcat 中已经提供了，我们只需要的是编译期提供而已。 runtime：运行时依赖范围，对于测试和运行有效，但是在编译主代码时无效，典型的就是 JDBC 驱动实现。 system：系统依赖范围，使用 system 范围的依赖时必须通过 systemPath 元素显示地指定依赖文件的路径，不依赖 Maven 仓库解析，所以可能会造成建构的不可移植。 传递依赖性依赖冲突1、对于 Maven 而言，同一个 groupId 同一个 artifactId 下，只能使用一个 version。 若相同类型但版本不同的依赖存在于同一个 pom 文件，只会引入后一个声明的依赖。 2、项目的两个依赖同时引入了某个依赖。 举个例子，项目存在下面这样的依赖关系： 这两条依赖路径上有两个版本的 X，为了避免依赖重复，Maven 只会选择其中的一个进行解析。 哪个版本的 X 会被 Maven 解析使用呢? Maven 在遇到这种问题的时候，会遵循 路径最短优先 和 声明顺序优先 两大原则。解决这个问题的过程也被称为 Maven 依赖调解 。 路径最短优先 依赖链路二的路径最短，因此，X(2.0)会被解析使用。 不过，你也可以发现。路径最短优先原则并不是通用的，像下面这种路径长度相等的情况就不能单单通过其解决了： 因此，Maven 又定义了声明顺序优先原则。 依赖调解第一原则不能解决所有问题，比如这样的依赖关系：A-&gt;B-&gt;Y(1.0)、A-&gt; C-&gt;Y(2.0)，Y(1.0)和 Y(2.0)的依赖路径长度是一样的，都为 2。Maven 定义了依赖调解的第二原则： 声明顺序优先 在依赖路径长度相等的前提下，在 pom.xml 中依赖声明的顺序决定了谁会被解析使用，顺序最前的那个依赖优胜。该例中，如果 B 的依赖声明在 D 之前，那么 X (1.0)就会被解析使用。 排除依赖单纯依赖 Maven 来进行依赖调解，在很多情况下是不适用的，需要我们手动排除依赖。 举个例子，当前项目存在下面这样的依赖关系： 根据路径最短优先原则，X(1.0) 会被解析使用，也就是说实际用的是 1.0 版本的 X。 但是！！！这会一些问题：如果 D 依赖用到了 1.5 版本的 X 中才有的一个类，运行项目就会报NoClassDefFoundError错误。如果 D 依赖用到了 1.5 版本的 X 中才有的一个方法，运行项目就会报NoSuchMethodError错误。 现在知道为什么你的 Maven 项目总是会报NoClassDefFoundError和NoSuchMethodError错误了吧？ 如何解决呢？ 我们可以通过exclusion标签手动将 X(1.0) 给排除。 一般我们在解决依赖冲突的时候，都会优先保留版本较高的。这是因为大部分 jar 在升级的时候都会做到向下兼容。 如果高版本修改了低版本的一些类或者方法的话，这个时候就能直接保留高版本了，而是应该考虑优化上层依赖，比如升级上层依赖的版本。 还是上面的例子： 我们保留了 1.5 版本的 X，但是这个版本的 X 删除了 1.0 版本中的某些类。这个时候，我们可以考虑升级 D 的版本到一个 X 兼容的版本。 Maven 仓库在 Maven 世界中，任何一个依赖、插件或者项目构建的输出，都可以称为 构件 。 坐标和依赖是构件在 Maven 世界中的逻辑表示方式，构件的物理表示方式是文件，Maven 通过仓库来统一管理这些文件。 任何一个构件都有一组坐标唯一标识。有了仓库之后，无需手动引入构件，我们直接给定构件的坐标即可在 Maven 仓库中找到该构件。 Maven 仓库分为： 本地仓库：运行 Maven 的计算机上的一个目录，它缓存远程下载的构件并包含尚未发布的临时构件。settings.xml 文件中可以看到 Maven 的本地仓库路径配置，默认本地仓库路径是在 $&#123;user.home&#125;/.m2/repository。 远程仓库：官方或者其他组织维护的 Maven 仓库。 Maven 远程仓库可以分为： 中央仓库：这个仓库是由 Maven 社区来维护的，里面存放了绝大多数开源软件的包，并且是作为 Maven 的默认配置，不需要开发者额外配置。另外为了方便查询，还提供了一个查询地址，开发者可以通过这个地址更快的搜索需要构件的坐标。 私服：私服是一种特殊的远程 Maven 仓库，它是架设在局域网内的仓库服务，私服一般被配置为互联网远程仓库的镜像，供局域网内的 Maven 用户使用。 其他的公共仓库：有一些公共仓库是为了加速访问（比如阿里云 Maven 镜像仓库）或者部分构件不存在于中央仓库中。 Maven 依赖包寻找顺序： 先去本地仓库找寻，有的话，直接使用。 本地仓库没有找到的话，会去远程仓库找寻，下载包到本地仓库。 远程仓库没有找到的话，会报错。 Maven 生命周期Maven 的生命周期就是为了对所有的构建过程进行抽象和统一，包含了项目的清理、初始化、编译、测试、打包、集成测试、验证、部署和站点生成等几乎所有构建步骤。 Maven 定义了 3 个生命周期META-INF/plexus/components.xml： default 生命周期 clean生命周期 site生命周期 这些生命周期是相互独立的，每个生命周期包含多个阶段(phase)。并且，这些阶段是有序的，也就是说，后面的阶段依赖于前面的阶段。当执行某个阶段的时候，会先执行它前面的阶段。 执行 Maven 生命周期的命令格式如下： default 生命周期default生命周期是在没有任何关联插件的情况下定义的，是 Maven 的主要生命周期，用于构建应用程序，共包含 23 个阶段。 根据前面提到的阶段间依赖关系理论，当我们执行 mvn test命令的时候，会执行从 validate 到 test 的所有阶段，这也就解释了为什么执行测试的时候，项目的代码能够自动编译。 clean 生命周期clean 生命周期的目的是清理项目，共包含 3 个阶段： pre-clean clean post-clean 根据前面提到的阶段间依赖关系理论，当我们执行 mvn clean 的时候，会执行 clean 生命周期中的 pre-clean 和 clean 阶段。 site 生命周期site 生命周期的目的是建立和发布项目站点，共包含 4 个阶段： pre-site site post-site site-deploy Maven 能够基于 pom.xml 所包含的信息，自动生成一个友好的站点，方便团队交流和发布项目信息。 Maven 插件Maven 本质上是一个插件执行框架，所有的执行过程，都是由一个一个插件独立完成的。像咱们日常使用到的 install、clean、deploy 等命令，其实底层都是一个一个的 Maven 插件。关于 Maven 的核心插件可以参考官方的这篇文档： 。 本地默认插件路径: $&#123;user.home&#125;/.m2/repository/org/apache/maven/plugins 除了 Maven 自带的插件之外，还有一些三方提供的插件比如单测覆盖率插件 jacoco-maven-plugin、帮助开发检测代码中不合规范的地方的插件 maven-checkstyle-plugin、分析代码质量的 sonar-maven-plugin。并且，我们还可以自定义插件来满足自己的需求。 jacoco-maven-plugin 使用示例： 你可以将 Maven 插件理解为一组任务的集合，用户可以通过命令行直接运行指定插件的任务，也可以将插件任务挂载到构建生命周期，随着生命周期运行。 Maven 插件被分为下面两种类型： Build plugins：在构建时执行。 Reporting plugins：在网站生成过程中执行。 Maven 多模块管理多模块管理简单地来说就是将一个项目分为多个模块，每个模块只负责单一的功能实现。直观的表现就是一个 Maven 项目中不止有一个 pom.xml 文件，会在不同的目录中有多个 pom.xml 文件，进而实现多模块管理。 多模块管理除了可以更加便于项目开发和管理，还有如下好处： 降低代码之间的耦合性（从类级别的耦合提升到 jar 包级别的耦合）； 减少重复，提升复用性； 每个模块都可以是自解释的（通过模块名或者模块文档）； 模块还规范了代码边界的划分，开发者很容易通过模块确定自己所负责的内容。 多模块管理下，会有一个父模块，其他的都是子模块。父模块通常只有一个 pom.xml，没有其他内容。父模块的 pom.xml 一般只定义了各个依赖的版本号、包含哪些子模块以及插件有哪些。不过，要注意的是，如果依赖只在某个子项目中使用，则可以在子项目的 pom.xml 中直接引入，防止父 pom 的过于臃肿。 如下图所示，Dubbo 项目就被分成了多个子模块比如 dubbo-common（公共逻辑模块）、dubbo-remoting（远程通讯模块）、dubbo-rpc（远程调用模块）。 文章推荐 安全同学讲 Maven 间接依赖场景的仲裁机制 - 阿里开发者 - 2022 高效使用 Java 构建工具｜ Maven 篇 - 阿里开发者 - 2022 安全同学讲 Maven 重打包的故事 - 阿里开发者 - 2022 参考 《Maven 实战》 Introduction to Repositories - Maven 官方文档： Introduction to the Build Lifecycle - Maven 官方文档： Maven 依赖范围： 解决 maven 依赖冲突，这篇就够了！： Multi-Module Project with Maven： "},{"title":"所有失去的都会以另一种方式归来","date":"2024-03-02T16:00:00.000Z","url":"/202403/a5931a3d46c5.html","tags":[["失恋读物","/tags/%E5%A4%B1%E6%81%8B%E8%AF%BB%E7%89%A9/"]],"categories":[["读书汇","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/"],["2024","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/2024/"]],"content":" 本书阅读时间 3 小时 如果说这本书没什么好读的，好像是对作者不尊重。 那么换种说法就是，我不是本书的受众吧。 为什么选择读这本书？完全是因为书名，第一眼觉得这是一本可以安慰读者的书。也确实是本安慰的书，只是个人觉得比较适合情场失意的读者去阅读，如果你没有这方面需求的话，没必要读。 "},{"title":"生而为人","date":"2024-03-01T16:00:00.000Z","url":"/202403/35e7ef0eb95d.html","tags":[["小说","/tags/%E5%B0%8F%E8%AF%B4/"]],"categories":[["读书汇","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/"],["2024","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/2024/"]],"content":" 阅读本书用了2天时间 书中讲解了9个关于人活着的故事 生而为人一切都是为了活着，又不只是为了活着 本书讲解了作者所在胶东大地发生的故事，书中的故事还可以。 总用人过的很卑微，他们为了活着，活着又是为了子女以及一切需要他们的地方。 看了这本书，感觉自己过的已经很不错了。 作者的村子里发生了好多的事 小香港 - 故事中的一个主要人物，一个被人所看不起的人物 陈少文- 在抗美援朝背景下的爱情故事 柳小霞 - 三姐妹开五星大饭店的故事 其他的不太记得了"},{"title":"定位","date":"2024-02-23T16:00:00.000Z","url":"/202402/0732c07cdf2e.html","tags":[["营销管理","/tags/%E8%90%A5%E9%94%80%E7%AE%A1%E7%90%86/"],["心智","/tags/%E5%BF%83%E6%99%BA/"]],"categories":[["读书汇","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/"],["2024","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/2024/"]],"content":" 读完本书大概花了3-5天时间 本书读起来对我来说确实有点难，也正说明了书中提到的一个观点：通常来说，心智只接受与其之前的知识和经验相一致的信息 本书提出了“定位理论”在一个企业中的作用和影响，甚至一个人都要做好定位，否则很难成功。 定位四步法： 第一步：分析整个外部环境 第二步：避开竞争对手在顾客心智中的强势，或者就是利用其强势中存在的弱点，确立品牌的优势位置——定位 第三步：为这一定位寻求一个可靠的证明——信任状 第四步：将这一定位整合到企业的方方面面 做好定位后，如何将自己的定位理念传播到用户的心智里去？ 书中说到：成功的传播，是要在恰当的时机对恰当的人说恰当的话。 可以把定位的战略运用的提升自己的事业上，关键原则是：不要试图全靠自己，而是要找一匹好马骑。赢得比赛的骑师通常来说所骑的马是最好的。 书中提到了6匹马： 所在的公司 你的老板 朋友 一个想法 信心 自己 要注意这6匹马的顺序，最后一个才是自己。"},{"title":"搭建自己的翻译服务","date":"2024-02-06T16:00:00.000Z","url":"/202402/78a38f236228.html","tags":[["Translate","/tags/Translate/"],["libretranslate","/tags/libretranslate/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["08-docker相关笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/08-docker%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"]],"content":"步骤： 第一步，拉取 docker 镜像 第二步，运行一个容器 第三步，设置宿主机端口开放 5001 ，并在浏览器访问对应宿主机的 5001 端口即可 "},{"title":"奇特的一生","date":"2024-01-25T16:00:00.000Z","url":"/202401/0e721a306dfb.html","tags":[["时间管理","/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"],["时间统计","/tags/%E6%97%B6%E9%97%B4%E7%BB%9F%E8%AE%A1/"],["柳比歇夫","/tags/%E6%9F%B3%E6%AF%94%E6%AD%87%E5%A4%AB/"]],"categories":[["读书汇","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/"],["2024","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/2024/"]],"content":" 大概用了4天时间阅读完成 时间是一个人在这个世界上真正拥有的东西 时间就像商品，你最好知道你的时间都去哪了 一个叫柳比歇夫的人，57年如一日的记录自己每天的时间，且时间误差不超过5分钟，甚至每周、每月、每年、每5年都做一次总结，这是多么奇特的一件事情啊。 他记录时间的方式也比较简单： 地点 + 时间 + 干什么 + 花费时间 （完成度），就是这么一件事，他从26岁开始，坚持了一生，直至他去世。时间大概是从1916年开始后就再未中断了，即使期间有战争、儿子去世、住院等各种情况。 通过简单的记录，他获得了精确的感知时间的能力。他所取得的成就应该于这个能力有很大的关系。 值得思考一下自己是否也需要开始记录了"},{"title":"Window10常用操作汇总","date":"2024-01-23T16:00:00.000Z","url":"/202401/c743c9e807a5.html","tags":[["Windows","/tags/Windows/"],["常用操作","/tags/%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["实用方法","/categories/%E6%9D%82%E6%96%87/%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95/"]],"content":" 打开类似于Win7的计算机属性 控制面板\\系统和安全\\系统 桌面显示 计算机、控制面板等 右键-》个性化-》主题-》桌面图标设置 关闭Windows defender拦截 Windows安全中心-》病毒和威胁防护-》管理设置-》添加和删除排除项 防火墙开启后无法 ping 通？ 要允许ICMP数据包（例如ping请求）通过Windows防火墙，您需要修改入站规则来允许ICMP通信。 控制面板-》系统和安全-》Windows Defender防火墙-》高级设置-》入站规则 在右侧，滚动找到和选择名为“文件和打印机共享 (Echo Request - ICMPv4-In)”的规则，右键启用规则 "},{"title":"Mac关闭DS_Store自动生成","date":"2024-01-21T16:00:00.000Z","url":"/202401/eb7c8b55cfd5.html","tags":[["Mac","/tags/Mac/"],["DS_Store","/tags/DS-Store/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["实用方法","/categories/%E6%9D%82%E6%96%87/%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95/"]],"content":"在终端执行并重启后生效 "},{"title":"娱乐至死","date":"2024-01-15T16:00:00.000Z","url":"/202401/d27a07e4ab95.html","tags":[["媒介","/tags/%E5%AA%92%E4%BB%8B/"],["信息-行动比","/tags/%E4%BF%A1%E6%81%AF-%E8%A1%8C%E5%8A%A8%E6%AF%94/"],["自相矛盾","/tags/%E8%87%AA%E7%9B%B8%E7%9F%9B%E7%9B%BE/"]],"categories":[["读书汇","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/"],["2024","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/2024/"]],"content":" 大概需要5天时间 新媒体世界，到处都是水，却没有一滴可以喝 我们热爱的东西本书讨论了一个观点：我们将毁于我们热爱的东西。 奥威尔担心我们憎恨的东西会毁掉我们，而赫胥黎担心的是，我们将毁于我们热爱的东西 赫胥黎在《美丽新世界》里想告诉我们：人们感到痛苦的不是他们用笑声代替了思考，而是他们不知道自己为什么笑以及为什么不再思考 一个躲猫猫的世界所有这些电子技术的合力迎来了一个崭新的世界——躲躲猫的世界。在这个世界里，一会儿这个、一会儿那个突然进入你的视线，然后又很快消失。这是一个没有连续性、没有意义的世界，一个不要求我们也不允许我们做任何事的世界，一个像孩子们玩的躲躲猫游戏那样完全独立闭塞的世界。但和躲躲猫一样，也是其乐无穷的 玩躲躲猫游戏并没有什么过错，娱乐本身也没有过错。正如有些精神病学家指出的，我们每个人都会筑起自己的空中楼阁，但如果我们想要住在里面，问题就出现了 关于假信息假信息并不意味着错误的信息，而是意味着使人产生误解的信息——没有依据、毫无关联、支离破碎或流于表面的信息——这些信息让人产生错觉，以为自己知道了很多事实，其实却离事实的真相越来越远 信息-行动比在电报时代之前，“信息—行动比”基本是平衡的，所以大多数人都有一种能够控制他们生活中突发事件的感觉。人们了解的信息具有影响行动的价值。但在电报创造的信息世界里，人们失去了行动的能力，因为整个世界都变成了新闻存在的语境。所有的一切都事关每个人。我们第一次得到了不能回答我们任何问题的信息，而且对于这些信息，我们也不必做出任何回答。 教育的最大错误也许人们对于教育最大的错误认识是，一个人学会的只有他当时正在学习的东西。其实，伴随学习的过程形成持久的态度……也许比拼写课或地理历史课更为重要……因为这些态度才是在未来发挥重要作用的东西。换句话说，一个人学到的最重要的东西是学习的方法 从电视上获得的意义往往是一些具体的片断，不具备推论性，而从阅读中获得的意义往往和我们原来储存的知识相关，所以具有较强的推论性。 谎言无法察觉谎言的社会是没有自由的 自相矛盾一个很好的例子，有这样一个人，他一会儿说在橘子和苹果中他更喜欢橘子，一会儿又说在橘子和苹果中他更喜欢苹果。如果一句话是在选择墙纸图案时说的，另一句话是在选择做甜点的水果时说的，我们就会说这两种意见是相反的，但它们不是自相矛盾的，如果这两句话是在同一个前后连贯的语境中说的，那么它们就是自相矛盾的，并且不可能同时成立 自相矛盾的存在需要具备一些条件，只有在一个前后连贯的语境中，观点和事件彼此相关，自相矛盾才能成立，如果语境消失了，或者被割裂了，那么自相矛盾也会随之消失"},{"title":"一款免费的数据恢复软件-Recuva","date":"2024-01-14T16:00:00.000Z","url":"/202401/794fbe87d059.html","tags":[["Windows","/tags/Windows/"],["数据恢复","/tags/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"],["Recuva","/tags/Recuva/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":"简介Recuva - 快速轻松地恢复您删除的文件 特点 有免费版支持 支持中文 安装下载地址： 使用"},{"title":"别想太多了","date":"2024-01-11T16:00:00.000Z","url":"/202401/e0134a3a04b2.html","tags":[["别想太多了","/tags/%E5%88%AB%E6%83%B3%E5%A4%AA%E5%A4%9A%E4%BA%86/"],["名取芳彦","/tags/%E5%90%8D%E5%8F%96%E8%8A%B3%E5%BD%A6/"],["5W1H原则","/tags/5W1H%E5%8E%9F%E5%88%99/"]],"categories":[["读书汇","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/"],["2024","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/2024/"]],"content":" 读本书持续3天 在复杂的世界里，做一个简单的人 没有一件事，一段关系值得你遍体鳞伤 不要戴着有色眼镜看人，与人交流时一定要时刻注意5W1H原则 给自己一点时间，一切都会慢慢变好 本书更像是一本工具书 不要在意别人的看法不要太在意别人的看法，当你太在意别人的看法时，就容易讨好别人，委屈自己！要试着寻找自己想做的事情，并全力以赴，这才是你的人生 有句话说：被夸奖的猪能上树，被夸奖的和尚会跳舞。可是猪是不会上树的，所以说不要在意“大家都这么说”，其中的的“大家”往往只代表有两三个人而已！ 人生并非一场胜负游戏，当我们自己的想法和别人的想法不一致时，如果试图把自己的想法强加到别人头上，结果往往并不如意。 5W1H原则不要戴着有色眼镜看人，与人交流时一定要时刻注意5W1H原则，即什么时候（When），谁（Who），为什么（Why），在哪里（Where），做什么（What），如何做（How）。 别被负能量感染当身边充斥负能量时，一定要时刻问“为什么生气”，相信每一个生气的人都有自己的理由，在理解这些理由之前反复去想“为什么”，基本就可以走出这个负能量的磁场 孤独不等于孤立从物理上说，孤独是指即使一个人生活，也拥有关系密切的朋友、家人；或者一个人独处，内心依然充实。僧侣坐禅，就是这种体验 人的本性人的本性是一种惯性行为，如果放纵不管，其危害无穷 要想人生过得顺利，与其靠运气，不如靠才智；与其靠才智，不如靠人格。 "},{"title":"指尖的工作箱-Quicker","date":"2024-01-09T16:00:00.000Z","url":"/202401/8173ba4190fe.html","tags":[["Windows","/tags/Windows/"],["效率工具","/tags/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"],["Quicker","/tags/Quicker/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":"简介Quicker 操作更少，收获更多，您的指尖工作箱 下载安装官网地址 大小仅有25M左右 使用内置了上万的自动化脚本"},{"title":"一款扩展系统菜单的工具-SmartSystemMenu","date":"2024-01-05T16:00:00.000Z","url":"/202401/d2fed4b84e28.html","tags":[["Windows","/tags/Windows/"],["扩展菜单","/tags/%E6%89%A9%E5%B1%95%E8%8F%9C%E5%8D%95/"],["SmartSystemMenu","/tags/SmartSystemMenu/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":"简介一款仅有890KB的小工具，它扩展了系统中所有窗口的系统菜单 特点 体积小 免费开源 功能强大 下载 开始使用 链接:  提取码: x95w "},{"title":"一款强大的卸载工具-Uninstall Tool","date":"2024-01-04T16:00:00.000Z","url":"/202401/73863b63ec52.html","tags":[["Windows","/tags/Windows/"],["卸载工具","/tags/%E5%8D%B8%E8%BD%BD%E5%B7%A5%E5%85%B7/"],["Uninstall Tool","/tags/Uninstall-Tool/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":"简介Unistall Tool 一款快速和强大的卸载程序，用于完全删除程序，管理自启动项 特点 功能强大 收费，但可以试用30天 下载地址 安装说明 安装完成后先不要运行，继续向下看 打开Crack文件，把Toolbox Universal.exe 复制到安装目录下 以管理员方式运行Toolbox Universal.exe ​ 如果弹出需要下载.Net Framework ,选择下载即可 开始使用 卸载完成后，会自动帮我们扫描痕迹，非常给力 链接:  提取码: esc6 "},{"title":"一款Windows资源管理器Q-Dir","date":"2024-01-03T16:00:00.000Z","url":"/202401/8f6fe2d48874.html","tags":[["Windows","/tags/Windows/"],["资源管理器","/tags/%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8/"],["多窗口","/tags/%E5%A4%9A%E7%AA%97%E5%8F%A3/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":"简介Q-Dir 是一款功能强大的Windows资源管理器，可以非常方便的管理各种文件。 Q-Dir有4 个窗口，特别适用于频繁在各个目录间跳跃复制粘贴的情况，每个窗口都可以方便的切换目录，以不同颜色区分不同类型的文件，各窗口之间可以方便的拖放操作互相的文件，大大提高工作效率。 特点 免费、无广告 体积小，仅有2M 个性化设置丰富 下载地址： "},{"title":"Windows系统维护工具Dism++","date":"2024-01-03T16:00:00.000Z","url":"/202401/b1d376a91aa5.html","tags":[["Windows","/tags/Windows/"],["系统维护","/tags/%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/"],["Dism++","/tags/Dism/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":"简介一款强大且易于使用的系统维护工具，集合了多种使用功能，如系统更新、垃圾清理、启动项管理、服务管理、系统还原等，方便用户进行一站式系统维护 特点 操作简单 免费无广告 纯粹干净 下载地址 开始使用 链接:  提取码: 7y3g "},{"title":"Mac控制外部显示器的亮度","date":"2024-01-02T16:00:00.000Z","url":"/202401/55858c95f2cd.html","tags":[["Mac","/tags/Mac/"],["外部显示器亮度","/tags/%E5%A4%96%E9%83%A8%E6%98%BE%E7%A4%BA%E5%99%A8%E4%BA%AE%E5%BA%A6/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["实用方法","/categories/%E6%9D%82%E6%96%87/%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95/"]],"content":"MonitorControl 一款免费、开源的可以控制外部显示器的亮度和音量。 下载地址：下载地址 直接安装即可！ 使用截图 "},{"title":"一款可以让鼠标变得更好的应用程序","date":"2024-01-02T16:00:00.000Z","url":"/202401/42930877ac60.html","tags":[["Mac","/tags/Mac/"],["Mouse Fix","/tags/Mouse-Fix/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":"众所周知，在 MacOS 上使用非官方的鼠标是很痛苦的。经过苦苦寻找，今天终于找到了一款软件 号称可以让鼠标比自带的触控板更好用的应用程序 简单使用 首先这两个选项代表启用 鼠标的按钮和滚动，启用后在配置项里设置才会生效 按钮设置 我这里设置了两个快捷方式 点按鼠标中键 - 唤出调度中心 点按鼠标中键并滚动 - 切换桌面空间 滚轮设置 下载地址：mac-mouse-fix"},{"title":"如何关闭 Mac 更新小红点","date":"2024-01-02T16:00:00.000Z","url":"/202401/f560541112fd.html","tags":[["Mac","/tags/Mac/"],["小红点","/tags/%E5%B0%8F%E7%BA%A2%E7%82%B9/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["实用方法","/categories/%E6%9D%82%E6%96%87/%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95/"]],"content":"如何关闭 Mac 更新小红点 步骤第一步：关闭自动更新 第二步：打开终端，输入以下命令即可 如何恢复小红点点开设置，开启更新就好了"},{"title":"Win10右键菜单设置","date":"2023-12-24T16:00:00.000Z","url":"/202312/fef111676a84.html","tags":[["Windows","/tags/Windows/"],["右键菜单","/tags/%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["实用方法","/categories/%E6%9D%82%E6%96%87/%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95/"]],"content":"简介Windows操作系统下自定义右键菜单功能有的时候可以实实在在的提高工作的效率 使用场景打开注册表Win + R ,然后输入regedit 情况一桌面上右键弹窗里自定义 情况二在某个文件夹上右键 情况三在文件上右键 实际效果： 其他关于 鼠标单击右键时，菜单移动到鼠标左侧的问题 如果想将菜单移动到图标的右侧，请按 Windows 键 + R 打开”运行”框。 在运行框里输入 shell:::{80F3F1D5-FECA-45F3-BC32-752C152E456E} 并按 Enter。 选择“其他”选项卡，切换“惯用右手”惯用左手“按钮，点击确定即可 "},{"title":"苹果手机如何给Windows传文件","date":"2023-12-24T16:00:00.000Z","url":"/202312/9e94fb4b9b08.html","tags":[["文件共享","/tags/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"],["文件传输","/tags/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":"特点无需安装任何软件，适用与苹果手机向Windows系统传输大容量文件 要求手机和电脑需要在同一个局域网内 方法步骤Windows电脑新建一个账户我的电脑-&gt;右键管理-&gt;系统工具-&gt;本地用户和组-&gt;用户-&gt;新建用户 设置密码永不过期 在桌面新建一个文件夹并设置共享权限 输入刚才设置的用户名，并点击检查名称 设置权限 设置共享 手机端设置将手机和电脑连入同一个局域网，或者手机开放热点给电脑也行，然后查看电脑的ip地址 苹果手机-&gt;文件-&gt;浏览-&gt;右上角3个点-&gt;连接服务器-&gt;输入上面电脑的ip和之前设置好的用户名和密码即可 共享文件手机选择要共享的文件-&gt;共享-&gt;选择”存储到文件”-&gt;选择存储到的服务器位置即可"},{"title":"西藏生死书","date":"2023-12-24T16:00:00.000Z","url":"/202312/2896784f1d81.html","tags":[["生死","/tags/%E7%94%9F%E6%AD%BB/"]],"categories":[["读书汇","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/"],["2023","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/2023/"]],"content":" 本书阅读时间3-5天 如果相信轮回，读这本书才有意义！ 常人爱说「死」是一了百了，本书告诉你：死不但没法一了百了，死得不好，非但是丧失了解脱的「权益」，连下辈子也会过得不好。 死亡只是另一期生命的开始 何为“中阴”？ 我理解是一种过渡的时间段，它的俱现：例如家里失窃了，从一开始焦躁不安的回想究竟丢失了哪些东西，突然你发现想这些都无济于事了，开始平静下来，因为你别无选择。你应该停在那个宁静的状态中一会，让它成为一个间隔。如果你确实安住在那个间隔中，往内心观照，你将瞥见觉悟心的不死性质。 何为“业”？ 业的字面意思是「行动」，业既是潜藏于行动的力量，也是吾人行动所带来的结果。不管我们以身、口、意做些什么，都将产生相应的结果，哪怕最细微的动作都孕育着它的结果。让我想到了“勿以善小而不为，勿以恶小而为之” 诚如佛陀所说的：「现在的你，是过去的你所造的；未来的你，是现在的你所造的。」莲花生大士进一步说：「如果你想知道你的过去世，看一看你现在的情况；如果你想知道你的未来世，看看你目前的行为。」 你的痛苦来自你的业，无论如何，你都必须在这一世或其他世承受业果，除非你能找出净化业力的方法。 佛教认为，这一世能成为人，有能力以比较好的方式来承担，你就应该去经验业报，如果让你成为牲畜，你去承担就会痛苦很多。 "},{"title":"一款优秀好用的本地影音播放器-PotPlayer","date":"2023-12-19T16:00:00.000Z","url":"/202312/95d05e8eca92.html","tags":[["本地播放器","/tags/%E6%9C%AC%E5%9C%B0%E6%92%AD%E6%94%BE%E5%99%A8/"],["PotPlayer","/tags/PotPlayer/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":" 简介一款Windows操作系统下的超强本地音视频播放器-PotPlayer，无广告，界面简洁，纯粹为播放而生！ 它既可以满足普通用户的一般播放需求，也可以满足高级用户的定制需求。 特点 免费 无广告 功能强大，设置齐全 纯粹的本地播放器，性能强劲，体验好 视频格式支持全面 下载安装官网地址："},{"title":"Windows的虚拟内存","date":"2023-12-15T16:00:00.000Z","url":"/202312/4d57da87786d.html","tags":[["虚拟内存","/tags/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"],["C盘瘦身","/tags/C%E7%9B%98%E7%98%A6%E8%BA%AB/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["实用方法","/categories/%E6%9D%82%E6%96%87/%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95/"]],"content":" C盘臃肿不堪，很有可能是因为虚拟内存占用的磁盘空间，本文将教你将虚拟内存设置在非系统盘符，在不影响性能的情况下达到瘦身的效果 通过显示隐藏文件查看C盘根目录下虚拟内存文件占用大小 设置到非系统盘 ​ 计算机-&gt;属性-&gt;高级系统设置-&gt;性能-&gt;设置-&gt;高级-&gt;更改；一般设置为真实内存的1.5 ~ 2倍即可 "},{"title":"Mac下如何使用NTFS格式的U盘","date":"2023-12-12T16:00:00.000Z","url":"/202312/9c4e401488e2.html","tags":[["Mac","/tags/Mac/"],["UTFS","/tags/UTFS/"],["U盘","/tags/U%E7%9B%98/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["实用方法","/categories/%E6%9D%82%E6%96%87/%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95/"]],"content":" 在Mac上使用U盘时，发现只能读取，不能写入，因为U盘的格式时Windows的NTFS格式，有什么办法可以让我们能正常读写U盘呢？ 方案一步骤 第一步：插入U盘 第二步：打开终端输入下面命令，记住U盘的名字 第三步：在&#x2F;etc目录下创建一个文件fstab，并写入下面的内容 第四步：从桌面退出U盘，重新插入U盘，这个时候桌面上已经看不到U盘了 第五步：在 启动台 里找到 磁盘工具 ，找到U盘，右键在访达显示即可 方案二安装软件，推荐使用Mounty 官网地址： 问题：每次拔掉U盘前，一定要先卸载U盘再退出软件，否则Mac就无法再识别U盘了 解决办法：把U盘再windows系统的电脑上重新退出一下就可以了"},{"title":"Everything 一款Windows上的搜索引擎","date":"2023-12-09T16:00:00.000Z","url":"/202312/bdae64bc8281.html","tags":[["Everything","/tags/Everything/"],["搜索","/tags/%E6%90%9C%E7%B4%A2/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":"简介“Everything” 是 Windows 上一款搜索引擎，它能够基于文件名快速定位文件和文件夹位置。 特点 免费 简洁 快速 占用系统资源非常少 可实时监控系统文件变更 无广告 官网地址"},{"title":"4个操作系统原版镜像网站推荐","date":"2023-12-09T16:00:00.000Z","url":"/202312/b786665dbab7.html","tags":[["Windows","/tags/Windows/"],["操作系统","/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":"Windows MSDN,我告诉你 MSDN,系统库 HelloWindows HelloWindows 包含了 下载工具、激活工具、Office、window操作系统 MSDN,山己几子木 CentOS CentOS下载地址"},{"title":"资料搜索站点","date":"2023-12-09T16:00:00.000Z","url":"/202312/55857dbfc4f7.html","tags":[["资料搜索","/tags/%E8%B5%84%E6%96%99%E6%90%9C%E7%B4%A2/"],["下载资源","/tags/%E4%B8%8B%E8%BD%BD%E8%B5%84%E6%BA%90/"],["资源下载","/tags/%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD/"],["大量资源","/tags/%E5%A4%A7%E9%87%8F%E8%B5%84%E6%BA%90/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":"学霸盘 - 百度网盘学习资料搜索下载神器 盘友圈 资源精灵 - 网盘搜索神器，可以替代云盘精灵、虫部落、盘搜搜等工具。 懒盘搜索官网 - 分享阿里云盘搜索引擎 新剧场-一个网盘资源分享小站 搜片.com - 搜你想看的影片"},{"title":"01-Java学习路线","date":"2023-12-06T16:00:00.000Z","url":"/202312/e0ada9514647.html","tags":[["java","/tags/java/"],["学习路线","/tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"]],"categories":[["Java学习","/categories/Java%E5%AD%A6%E4%B9%A0/"],["Java基础","/categories/Java%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/"],["第一阶段","/categories/Java%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"]],"content":"Java学习Java基础第一阶段 Java语言概述与开发环境 变量与运算符 流程控制语句 数组 第二阶段 面向对象编程 第三阶段 常用类和基础API 集合 泛型 异常处理 File类与IO流 多线程 网络编程 反射机制 Java高级SpringBoot实战"},{"title":"02-Java语言概述与开发环境","date":"2023-12-06T16:00:00.000Z","url":"/202312/a17b56d5bec9.html","tags":[["Java概述","/tags/Java%E6%A6%82%E8%BF%B0/"],["Java开发环境","/tags/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"],["IDEA","/tags/IDEA/"]],"categories":[["Java学习","/categories/Java%E5%AD%A6%E4%B9%A0/"],["Java基础","/categories/Java%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/"],["第一阶段","/categories/Java%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"]]},{"title":"03-变量与运算符","date":"2023-12-06T16:00:00.000Z","url":"/202312/e12a8bf220bd.html","tags":[["变量","/tags/%E5%8F%98%E9%87%8F/"],["运算符","/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"]],"categories":[["Java学习","/categories/Java%E5%AD%A6%E4%B9%A0/"],["Java基础","/categories/Java%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/"],["第一阶段","/categories/Java%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"]]},{"title":"05-数组","date":"2023-12-06T16:00:00.000Z","url":"/202312/6482d018255b.html","tags":[["java","/tags/java/"],["学习路线","/tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"]],"categories":[["Java学习","/categories/Java%E5%AD%A6%E4%B9%A0/"],["Java基础","/categories/Java%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/"],["第一阶段","/categories/Java%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"]],"content":""},{"title":"04-流程控制语句","date":"2023-12-06T16:00:00.000Z","url":"/202312/b2e10a6a700f.html","tags":[["java","/tags/java/"],["学习路线","/tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"]],"categories":[["Java学习","/categories/Java%E5%AD%A6%E4%B9%A0/"],["Java基础","/categories/Java%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/"],["第一阶段","/categories/Java%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/"]]},{"title":"Windows软件安装报2502、2503问题","date":"2023-12-03T16:00:00.000Z","url":"/202312/db3da38703a6.html","tags":[["2502","/tags/2502/"],["2503","/tags/2503/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["实用方法","/categories/%E6%9D%82%E6%96%87/%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95/"]],"content":"安装windows 安装软件时出现2502，2503报错 此现象是安装权限不足所致，此时，调用管理者权限cmd终端，终端内命令行安装即可。步骤如下： 第一步：右键开始菜单，选择Windows PowerShell（管理员） 第二步：进入安装包安装目录，执行安装命令即可 卸载windows 卸载软件时出现2502，2503报错 第一步：进入安装程序目录 C:\\Windows\\Installer 第二步：执行下面3个步骤就可以找到对应程序的msi了 第三步：管理员进入Windows PowerSheel 第四步：执行第二步找到的msi 参考地址：查看 补充出现这个问题，大多是因为当前用户对C:\\Windows\\Temp这个文件夹的权限不够造成的，所以提权才是解决的关键 找到Temp这个文件夹，然后右键属性-》高级-》添加 选择主体-》填入当前账号名称-》把权限都勾上即可 "},{"title":"如何阅读一本书","date":"2023-12-03T16:00:00.000Z","url":"/202312/cf35debd3367.html","tags":[["阅读技巧","/tags/%E9%98%85%E8%AF%BB%E6%8A%80%E5%B7%A7/"]],"categories":[["读书汇","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/"],["2023","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/2023/"]],"content":" 本书阅读时长5-7天 资讯太多和太少都会阻碍我们的理解力。 要主动阅读 在读《跃迁-成为高手的技术》时，作者古典提到了读此书可以提升读书的效率，所以就读了。 捕手我们如何阅读一本书就像捕手如何接住球，捕手的艺术就在于能接住任何球的技巧——快速球、曲线球慢速球等，同理阅读也有技巧。 棒球运动：投手-》捕手 读书：作者-》读者 怎么才能提高读书的效率在有限的时间内系统的粗略的去读可以提高效率，但是又引发出一个新的问题——就是如何系统的粗略的去读书？ 检视阅读如何系统的粗略的去读书第一步：读书名部分内容 第二步：读书的介绍部分 第三步：读书的序 第四步：读书的目录部分 第五步：从目录里选几个最贴近书的主题的部分出来进行阅读 第六步：打开书，随便念个一两段，或者去读几页，但不要太多 第七步：读书的结尾3页 至此，大约花费1个小时左右的时间，基本就可以确定这本书是否需要花费更多的时间去进行下一个层次的阅读了 粗浅的阅读从头到尾阅读一边，碰到不懂的地方不要停下来。 眼睛跟着手指移动 学会一个快速读书的方法：用手指顺着一行一行的字快速移动，眼睛跟着手部的动作移动。 分析阅读适合用来阅读非小说、论说性的书 我的理解人到了30左右，身体的发展就到了巅峰，但是头脑却可以无限发展下去。 "},{"title":"跃迁 - 成为高手的技术","date":"2023-12-02T16:00:00.000Z","url":"/202312/65e9832f0d5b.html","tags":[["联机学习","/tags/%E8%81%94%E6%9C%BA%E5%AD%A6%E4%B9%A0/"],["刻意练习","/tags/%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0/"],["幂律分布","/tags/%E5%B9%82%E5%BE%8B%E5%88%86%E5%B8%83/"]],"categories":[["读书汇","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/"],["2023","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/2023/"]],"content":" 本书阅读消耗时间3-4天 带着目的读书、带着问题读书！ 相信幂律分布规则，基本所有的事物都符合这个规律 要学会去做更少但是更好的事 保持开放 主题跃迁这本书讲的主题是如何利用规律和趋势放大个人的努力 知道知识在哪儿比知道知识是什么更重要，调用知识而非记忆知识。 未来世界的认知能力是找到信息的搜索能力，运用信息的思考能力以及从大量信息里抓取趋势的洞察能力，智慧不等于信息，记忆应交给电脑。 你投入练习，产出技能;投入享乐，产出体验，挺入情感，产出关系;摄入学习，产出认知。每个人都是自己的投资人一—早上拿到24小时的时间精力，晚上账户结算，第二天早上重新开始。决定一个人儿年后不同的，正是那些你睡着以后，能多持续选代的东西。 幂律分布到现在，我们己经谈到了高手战略的两个规律 对内，通过二八法则三次方，持线放大自我效能; 对外，通过移动到系统的头部，获得系统巨大推动力 先找价值，再定优势。千万不要被自己的优势迷惑 所以，三流高手靠努力，二流高手靠技艺，一流高手靠专注。做更少但是更好的事。当一个人已经站到了优势位置，只要保持专注节制，就不会输。销量最大的苹果手机，恰恰是机型最少的品牌 这是一个知识爆炸，终身学习的时代，人与人之间比拼的不是学与不学的问题，而是认知效率。 我们要保持开放。一个封闭的系统，一定会熵增，趋于平均和无序 《稀缺》这本书中提出“思维带宽”的概念。穷人贫穷是因为他们的注意力都放在如何解决温饱的问题上，很少有多余的“思维带宽”思考长远发展的问题。你总想着今天的饭有没有着落，哪里有时间思考什么发展战略、儿女教育呢？发展战略显然是脱贫的核心。如果说贫穷是一种“思维带宽”的稀缺，注意力资源就变得非常重要——大神战略的每一步都是反人性的，需要巨大的带宽。所以，如果你注意力稀缺，即使你知道要做些什么，也会陷入战术勤奋、战略懒惰的困局。 你对外界的看法，决定了你能走多远 单次博弈的最理性方式就是忽悠，我觉得说的很对。 "},{"title":"Windows操作系统如何查看HEIC格式的照片","date":"2023-11-30T16:00:00.000Z","url":"/202312/5737797ddb1b.html","tags":[["HEIC","/tags/HEIC/"],["iphone照片","/tags/iphone%E7%85%A7%E7%89%87/"],["Windows查看HEIC","/tags/Windows%E6%9F%A5%E7%9C%8BHEIC/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":"HEIC格式是苹果为了保证压缩比且能保证图片清晰而推出的专有的照片格式，所以只能在苹果设备上直接查看。 如何在Windows设备上查看呢？ 推荐安装Windows10支持的 - HEIF 图像拓展 应用程序HeicToJPEG.exe需要将heic格式的图片和应用放在一起，双击应用即可 HeicToJpg.v0.2解压HeicToJpg.v0.2.zip压缩包 需要将heic格式的图片放在input目录，转换后的图片会自动保存在output目录 HEIF-Utility1.解压压缩包内的“HEIF-Utility”文件夹，不要解压到系统目录。2.以管理员身份运行解压后的文件夹中的 HEIF-Utility-Setup.exe 来进行配置。3.运行主程序 HEIF-Utility.exe。 链接:  提取码: snjs 转换网站 改图鸭 - 非会员不能转换超过2M的文件 "},{"title":"找书新世界","date":"2023-11-29T16:00:00.000Z","url":"/202311/afa338206886.html","tags":[["找书","/tags/%E6%89%BE%E4%B9%A6/"],["电子书","/tags/%E7%94%B5%E5%AD%90%E4%B9%A6/"]],"categories":[["读书汇","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/"]],"content":"推荐 Zlibrary - 全球最大数字图书馆 自动获取Zlibrary最新网址的神奇邮箱 blackbox@1delivery.re 任意发送一份邮件即可 Zlibrary官网应用下载页：地址 官方Telegram：地址 官方中文Telegram：地址 书享家 - 一个电子书的下载导航站 鸠摩搜索 - 文档搜索引擎 书栈网 - 程序员IT互联网开源编程书籍免费阅读 格式转换epub、mobi转换为众多的其他格式 calibre - 一款开源、免费的转换软件 具体操作（已废弃） 由于秒传码问题，已无法通过下面的方式下载书籍了 准备工作 找到全国图书馆参考咨询联盟注册登录账号 使用Firefox浏览器安装图书互助插件 使用Firefox浏览器登录百度网盘安装秒传插件 在检索库中检索，获得秒传码，保存到百度网盘下载 准备解压工具 准备pdg转pdf工具 找书 在全国图书馆参考咨询联盟搜索要找的图书，在图书下方会出现一个红色的码，这个码就是这本书的唯一SS码 在检索库中检索，获得秒传码，在网页版百度网盘中点击“秒传”，输入秒传码即可把压缩包保存到网盘 下载解压转pdf下载上面的两个软件即可 另一个找书的地方：安娜的档案"},{"title":"哪有没时间那回事","date":"2023-11-28T16:00:00.000Z","url":"/202311/d2cfe85d5ba0.html","tags":[["时间管理","/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"],["倒逼","/tags/%E5%80%92%E9%80%BC/"]],"categories":[["读书汇","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/"],["2023","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/2023/"]],"content":" 耗时2-3天 晚上睡不着，一定是还不够累，那就早晨早点起，倒逼晚上早睡 通过打卡可以帮助我们达到坚持的目的 清单制作一天的事务清单，按照清单的内容来安排自己的时间，逐渐优化清单项，以此来控制自己的时间。 番茄工作法书中提到的番茄工作法就是每工作25分钟休息5分钟，如此循环四次后休息半小时为一轮。这个方法有点机械，但是可以作为训练专注力的基本方法。可以把它当作手段，但不能依赖它！ 打卡通过对期望行为进行打卡可以帮助我们更好的去完成坚持，类似于幼儿园的小朋友每一次良好表现得到小红花或小红旗一样。 "},{"title":"Gif录制工具","date":"2023-11-27T16:00:00.000Z","url":"/202311/5b0d3f62d75a.html","tags":[["Gif录制","/tags/Gif%E5%BD%95%E5%88%B6/"],["屏幕录制Gif","/tags/%E5%B1%8F%E5%B9%95%E5%BD%95%E5%88%B6Gif/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":"简介一款开源、免费的可以将屏幕录制为Gif格式的工具，并且可以对录制结果进行编辑 官方地址：ScreenToGif - 录制屏幕，编辑并保存为 gif、视频或其他格式 开源地址： 支持 Windows "},{"title":"如何使用手机做电脑的网卡","date":"2023-11-27T16:00:00.000Z","url":"/202311/b84f6f49b07d.html","tags":[["手机","/tags/%E6%89%8B%E6%9C%BA/"],["电脑网卡","/tags/%E7%94%B5%E8%84%91%E7%BD%91%E5%8D%A1/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":" 背景笔记本太老旧了，自带的无线网卡搜不到路由器的5G wifi，或者搜到的信号弱；台式机不方便安装网线，又不想买无线网卡 实验硬件 台式机或笔记本 手机（华为P10） 数据线 操作步骤 手机和电脑用数据线连接 手机连接家里的无线网络 打开手机 设置-&gt;无线和网络-&gt;移动网络共享-&gt;USB 共享网络 "},{"title":"干法","date":"2023-11-26T16:00:00.000Z","url":"/202311/80a963300e17.html","tags":[["稻盛和夫","/tags/%E7%A8%BB%E7%9B%9B%E5%92%8C%E5%A4%AB/"]],"categories":[["读书汇","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/"],["2023","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/2023/"]],"content":" 都本书耗时2天 读本书耗时2天 干就完了，通过拼命工作达到升华灵魂、陶冶情操的状态 没有什么烦恼是通过努力工作解决不了的 三种类型的人 自燃型 - 在别人吩咐之前自发去干 可燃型 - 等人吩咐才去干，有了命令才去做 不燃型 努力成为自燃型的人，起码也是可燃型，绝对不能成为不燃型 工作观工作结果 &#x3D; 思维方式 * 热情 * 能力 付出不亚于任何人的努力，当你竭尽全力时神灵就会出现 "},{"title":"打造第二大脑","date":"2023-11-25T16:00:00.000Z","url":"/202311/e1629769dacd.html","tags":[["做笔记","/tags/%E5%81%9A%E7%AC%94%E8%AE%B0/"],["CODE法则","/tags/CODE%E6%B3%95%E5%88%99/"],["PARA系统","/tags/PARA%E7%B3%BB%E7%BB%9F/"],["十二个问题","/tags/%E5%8D%81%E4%BA%8C%E4%B8%AA%E9%97%AE%E9%A2%98/"]],"categories":[["读书汇","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/"],["2023","/categories/%E8%AF%BB%E4%B9%A6%E6%B1%87/2023/"]],"content":" 阅读本书持续了2-3天空闲时间 书中提到的12个问题很重要，这些问题最好是开放性的问题，对我们去做知识的收集有很大帮助。 书中推荐利用软件应用完成信息的存储、提取 释放大脑，让大脑有更多的空间去做创意类的工作 分享知识的目的在于分享，当然能帮助别人并不是一项义务。 当我们收集到的知识越来越多的时候，内心的服务意识便会浮出水面。如果知识跟我们在内的任何人都没有影响，那它他又有什么意义呢？ 自我表达是人类的基本需求，是与衣食住行同样重要的生活必需品，所以我们必须要学会分享自己的生活经历，小到生活中的点点滴滴的感触。 技巧善于利用思想群岛，海明威之桥，压缩范围等创作技巧 思想群岛 在发散阶段，要构建足够多的想法、素材、观点便于后期创作 海明威之桥 将思想群岛通过桥梁连接起来，比如： 下一步的想法 当前的状态 易被遗忘的信息 下一阶段的目标 压缩范围 不能等所有的交通灯都变为绿色才发动汽车，学会压缩 CODE法则 抓取 组织 提炼 表达 PARA系统 项目 Project 领域 Area 资源 Resource 存档 Archive 通过PARA的方式对我们抓取到的内容进行组织 十二个问题信息抓取法 怎样才能每周输出一条1分钟以上的分享视频 如何走出“囤书而不读书”的窘境 如何保证一周读完一本书 "},{"title":"Alist与RaiDrive实现把网盘挂载在本地","date":"2023-11-13T16:00:00.000Z","url":"/202311/b586b4ed01bc.html","tags":[["Alist","/tags/Alist/"],["RaiDrive","/tags/RaiDrive/"],["网盘整合","/tags/%E7%BD%91%E7%9B%98%E6%95%B4%E5%90%88/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["实用方法","/categories/%E6%9D%82%E6%96%87/%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95/"]],"content":" 解决网盘账号太多，需要下载不同的客户端，登录不同的账号问题 让网盘变成类似我们系统的磁盘一样使用 Alist一个支持多种存储的文件列表程序 官网地址： 守护进程用 .VBS 脚本启动和停止，分别创建两个脚本 分别是 启动.vbs 和 停止.vbs 直接在和Alist启动程序同级文件夹里面双击启动即可，不用担心没有反应 直接去 浏览器访问即可 启动.vbs 停止.vbs 实现自启动 将启动.vbs设置快捷方式 win + R 输入：shell:startup 将生成的快捷方式复制进文件夹即可 RaiDrive一款能够将各种云存储和网络存储设备（NAS）映射为本地磁盘的软件，让您可以在文件资源管理器中看到一个新的磁盘驱动器，并直接在这个磁盘上操作文件，就像在本地磁盘上一样 官网地址：RaiDrive 下载地址：下载 安装配置默认安装就可以了，由于网络问题可能一次安装不成功，多尝试吧 实在是安装不上就采用下面的方式吧 rclone除了RaiDrive以外，rclone也可以把Alist映射到本地，并且是开源免费的，不会有弹窗广告，但是对新手不太友好 准备软件 下载rclone安装包，下载地址，根据情况下载对应的版本就可以了 下载winfsp，下载地址 在windows操作系统下是必须的 安装配置 解压rclone-v1.65.0-windows-amd64.zip，并把解压出来的文件直接拷贝到自己的安装目录即可。我一般是D:\\Program 安装winfsp，选择好安装目录，其他的默认安装就可以了 进入rclone.exe所在目录进行配置 默认生成的配置文件在：C:\\Users\\xxx\\AppData\\Roaming\\rclone\\rclone.conf 进入rclone.exe所在目录执行挂载命令 这个时候就可以看到已经挂载完成了 开机自启动 将配置文件拷贝到rclone安装目录 新建 start.bat 解释： alist:&#x2F; 是配置文件中webdav的名称 k: 是映射到本地的磁盘盘符 –no-console 表示后台启动 –log-file 表示日志文件路径 新建 启动rclone.vbs 对 启动rclone.vbs 创建快捷方式，并放入 自启动目录（运行-》shell:startup） 新建 停止.vbs "},{"title":"Windows自启动设置","date":"2023-11-12T16:00:00.000Z","url":"/202311/215c93d2ee10.html","tags":[["regedit","/tags/regedit/"],["注册表","/tags/%E6%B3%A8%E5%86%8C%E8%A1%A8/"],["自启动","/tags/%E8%87%AA%E5%90%AF%E5%8A%A8/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["实用方法","/categories/%E6%9D%82%E6%96%87/%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95/"]],"content":"设置自启动 打开运行 Win + R 打开注册表 regedit 在下面两个地方增加项即可 "},{"title":"TVBox打包记录","date":"2023-11-04T16:00:00.000Z","url":"/202311/6742ef5505a1.html","tags":[["TVBox","/tags/TVBox/"],["Android 打包","/tags/Android-%E6%89%93%E5%8C%85/"],["APK","/tags/APK/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":"TVBox 观影神器介绍一款开源的、可玩性极强的多端影音工具，用户可以自定义资源，市面上大部分影音工具都基于此二次开发。 开源地址：  特点 支持各类爬虫源、XP源、采集源等 无限制，无广告 支持本地功能，聚合模式 支持去片头、片尾等 接口地址 TVBox打包记录步骤第一步：下载打包工具 Android Studio 版本： 第二步：拉取源代码 第三步：修改gradle和gradle的匹配版本 原因：打包工具带的java版本有点高了，java17 参照链接： 问题手动下载gradle "},{"title":"文件跨平台共享","date":"2023-10-24T16:00:00.000Z","url":"/202310/355bba90d6e7.html","tags":[["文件共享","/tags/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"],["跨平台","/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":"文件跨平台共享介绍LocalSend 一款开源的跨平台文件传送软件，不需要互联网连接，依靠共享 Wifi 分享文件,与其他依赖外部服务器的消息传递应用程序不同，LocalSend 不需要互联网连接或第三方服务器，使其成为快速可靠的本地通信解决方案 官网： GitHub： 特点 无需联网 免费 开源 跨平台 无广告 下载地址链接：提取码：a8j4"},{"title":"手机投屏到电脑","date":"2023-10-23T16:00:00.000Z","url":"/202310/bd0081249342.html","tags":[["投屏","/tags/%E6%8A%95%E5%B1%8F/"],["Scrcpy","/tags/Scrcpy/"],["Scrcpy GUI","/tags/Scrcpy-GUI/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":"软件介绍源码地址： Scrcpy 是由流行的Android模拟器Genymotion背后的团队创建的，但它本身并不是Android模拟器，它显示和控制通过USB（或通过TCP/IP）连接的Android设备，它不需要任何root访问权限，它适用于GNU/Linux、Windows和MacOS。 如果你想在桌面上看到你的Android屏幕与应用程序或内容进行交互，记录你的手机屏幕或执行其他基本任务，那Scrcpy就是一个好的选择。 简而言之，Scrcpy是一种极好的方式，可以在你的计算机上轻松查看你的Android屏幕，并且可以实时与其进行交互。 特性 非侵入性 （设备上没有安装任何东西） 不需要 ROOT 有线无线都可连接 画面随意裁剪，自带录屏（手游直播利器） 利用电脑的键盘和鼠标可以控制手机 低延迟 （70~100ms） 手机电脑共享剪贴板 安装步骤 手机打开USB调试：开发人员选项-》USB调试 安装好ADB和Scrcpy，并配置好环境变量 Windows 解压 Scrcpy 压缩包，里面已经包含了 ADB、Scrcpy，接着设置环境变量即可 Mac 安装Scrcpy GUI应用 连接方法必备条件 请确保 adb , scrcpy 可正常使用 请确保手机已打开 USB 调试, 并已认证电脑调试 有线连接 请确保手机已通过数据线连接到电脑 等待软件自动检测到设备 选中设备，点击打开选中的镜像 等待设备打开 无线连接 请确保手机与电脑处在同一局域网 第一次无线连接时: 请确保手机已通过数据线连接到电脑 请确保只有一个手机通过数据线连接到电脑 第一次需设置端口，以后连接手机，只需要添加手机的静态IP即可 输入手机的局域网IP地址（如果IP为DHCP分配，请更改为静态IP） 点击开启无线连接 等待无线连接成功 选中设备，点击打开选中的镜像 等待设备打开 快捷键 操作 快捷键 快捷键 (macOS) 切换全屏模式 Ctrl+f Cmd+f 将窗口调整为 1:1 Ctrl+g Cmd+g 调整窗口大小以删除黑色边框 Ctrl+x | 双击黑色背景 Cmd+x | 双击黑色背景 设备HOME键 Ctrl+h | 鼠标中键 Ctrl+h | 鼠标中键 设备BACK键 Ctrl+b | 鼠标右键 Cmd+b | 鼠标右键 设备任务管理键 Ctrl+s Cmd+s 设备菜单键 Ctrl+m Ctrl+m 设备音量+键 Ctrl+↑ Cmd+↑ 设备音量-键 Ctrl+↓ Cmd+↓ 设备电源键 Ctrl+p Cmd+p 点亮手机屏幕 鼠标右键 鼠标右键 关闭设备屏幕（保持镜像） Ctrl+o Cmd+o 展开通知面板 Ctrl+n Cmd+n 折叠通知面板 Ctrl+Shift+n Cmd+Shift+n 将设备剪贴板中的内容复制到计算机 Ctrl+c Cmd+c 将计算机剪贴板中的内容粘贴到设备 Ctrl+v Cmd+v 将计算机剪贴板中的内容复制到设备 Ctrl+Shift+v Cmd+Shift+v 安装APK 将APK文件拖入投屏 将APK文件拖入投屏 传输文件到设备 将文件拖入投屏 将文件拖入投屏 启用&#x2F;禁用FPS计数器（stdout） Ctrl+i Cmd+i ScrcpyScrcpy-gui 只是一个前端的壳，实质上背后还是Scrcpy在发挥作用，由于Scrcpy-gui已不再更新，所以导致官网推荐的scrcpy的版本过低，影响了一些新的设备无法使用，这个时候需要到scrcpy的源码地址下载最新的scrcpy即可 源码地址："},{"title":"Inno Setup 教程","date":"2023-10-21T16:00:00.000Z","url":"/202310/e77b609152a3.html","tags":[["Inno Setup","/tags/Inno-Setup/"],["流程制作","/tags/%E6%B5%81%E7%A8%8B%E5%88%B6%E4%BD%9C/"],["桌面程序","/tags/%E6%A1%8C%E9%9D%A2%E7%A8%8B%E5%BA%8F/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["EXE流程制作","/categories/%E5%AE%9E%E6%88%98/EXE%E6%B5%81%E7%A8%8B%E5%88%B6%E4%BD%9C/"]],"content":"认识Inno Setup介绍一款开源、免费的可以用来制作exe软件安装流程的打包软件！！！ 官网地址： 特点： 支持自 2006 年以来的每个 Windows 版本 支持创建单个 EXE 来安装程序，以便于在线分发 标准窗口向导界面 完整的卸载功能 在任何地方创建快捷方式，包括在“开始”菜单和桌面上 创建注册表和 .INI 条目 在安装之前、期间或之后运行其他程序 支持多语言安装 集成 Pascal 脚本引擎选项，用于高级运行时安装和卸载自定义 下载安装 Inno Setup下载地址：  中文语言包：  注意 ：这个中文语言包是生成的软件安装过程语言包，不是Inno Setup的汉化包 放置位置如下图所示： 简单使用生成安装过程图标网站： png转ico： 步骤： 使用脚本向导创建一个新的脚本 下一步。。。 注意：这次是可以选择中文语言包了 BUG 1 解决方案 用记事本查看语言包ChineseSimplified.isl的保存格式，将保存格式设置为 ANSI 即可 几个重要信息的设置 修改安装包图标图标中至少包含以下尺寸：16x16、32x32、48x48、64x64和256x256。 如果未指定该指令或该指令为空，则将使用支持上述大小的内置图标 修改安装过程中的图片 进阶 场景一：我们开发的软件不只有exe文件，还包含了一些资源文件（图片、音频等）、dll动态库文件等等，那我们就需要把这些东西也一并打包 场景二：我们开发了一款软件，这个软件的运行依赖与另外一个指定版本的软件，所以就需要实现在安装我们这个软件之前，先安装好另外一个软件 Pascal脚本功能（类似Pascal的现代Delphi）为在运行时自定义安装或卸载添加了许多新的可能性。 支持在自定义条件下中止安装程序或卸载启动。 支持在运行时向安装程序添加自定义向导页面。 支持在安装之前、期间或之后从Pascal脚本中提取和调用DLL或其他文件。 支持可以执行任何操作的脚本常量-普通常量、从注册表读取、从ini读取和从命令行读取常量可以执行更多操作。 支持在自定义条件下运行时删除类型、组件和&#x2F;或任务。 支持根据自定义条件有条件地安装[Files]、[Registry]、[Run]等条目。 Pascal脚本有很多支持功能，几乎是Inno Setup本身所能做的一切。 Pascal语法基础 [Files]项[Files]项内定义安装程序要在用户系统上安装的任何文件 Source：必填项，源文件名称，可以是一个通配符，用于在单个条目中指定一组文件 DestDir：必填项，文件要安装在用户系统上的目录，几乎总是以其中一个目录常量开头。如果指定的路径在用户的系统中不存在，则会自动创建该路径，如果为空，则会在卸载过程中自动删除该路径。 Flags：扩展参数，多个项可以通过空格分隔 deleteafterinstall：指示安装程序照常安装文件，但在安装完成（或中止）后将其删除。这对于提取在脚本的[运行]部分执行的程序所需的临时数据非常有用，注意：不能与isreadme、regserver、regtypelib、restartreplace、sharedfile或uninsoveruninstall标志组合使用 ignoreversion：不比较版本信息直接替换现有文件，无论其版本号如何，注意：此标志只能用于应用程序专用的文件，而不能用于共享系统文件 isreadme：标明是“自述”文件。安装中只有一个文件可以具有此标志。当文件具有此标志时，用户将询问他们是否希望在安装完成后查看自述文件。如果选择“是”，安装程序将使用文件类型的默认程序打开该文件。因此，README文件应该始终以.txt、.wri或.doc等扩展名结尾。 请注意，如果安装程序必须重新启动用户的计算机（由于安装了带有restartreplace标志的文件，或者如果AlwaysStart[Setup]部分指令为yes），则用户将无法查看自述文件 [code]项[Code]部分是一个可选部分，用于指定Pascal脚本。Pascal脚本可以通过多种方式用于自定义安装或卸载。请注意，创建Pascal脚本并不容易，需要Inno Setup的经验和Pascal或至少类似编程语言的编程知识。 Event FunctionsInitializeSetup() Registry functionsRegKeyExists() RegValueExists() RegGetSubkeyNames() RegGetValueNames() RegQueryStringValue() File funcionsExec() ExtractTemporaryFile() Dialog functionsMsgBox() Setup Logging functionsLog() 关键代码"},{"title":"手机秒变电脑音箱","date":"2023-10-21T16:00:00.000Z","url":"/202310/ffcfac2091b4.html","tags":[["手机","/tags/%E6%89%8B%E6%9C%BA/"],["电脑音箱","/tags/%E7%94%B5%E8%84%91%E9%9F%B3%E7%AE%B1/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":"手机秒变电脑音箱介绍SoundWire 支持将我们的安卓设备变成无线扬声器，允许我们使用PC或笔记本电脑将任何音乐或音频从我们的电脑通过WIFI将低延时的实时声音传输到安卓设备。 使用方法第一步：首先确保手机和PC在同一局域网内，就是说手机和PC连接着同一个无线网（wifi） 第二步：在电脑端安装SoundWire Server服务端软件并启动。如下图 第三步：在安卓手机上安装SoundWire的客户端。安装后打开软件并启动。如下图 第四步：将第二步电脑上的ip地址输入手机，APP会自动去和电脑进行连接，连接成功后，电脑端会显示一个绿色的Connected ,这时你就能在手机上听到电脑发出的所有声音了。 第五步：如果你在手机上听到的声音有卡顿现象，首先检查 WIFI 信号是否良好，其次就是点击手机端右上角的三个点 ，选择 Settings 里面有一个叫做 Audio Buffer Size 的设置，将其调小到 8k 就可以了。 软件下载链接： 提取码：cphw"},{"title":"Hook原理及wechat二维码的获取","date":"2023-09-18T16:00:00.000Z","url":"/202309/90cc6bf7a057.html","tags":[["Wechat","/tags/Wechat/"],["Hook","/tags/Hook/"],["wechat.exe 3.7.0.29","/tags/wechat-exe-3-7-0-29/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["10-Wechat Hook相关笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10-Wechat-Hook%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"]],"content":"Hook原理介绍什么是hook英文意思：钩子 原理如下图： 微信二维码获取使用工具OD 全称 OllyDebug，一种反汇编软件，动态追踪工具，Ring 3 级的调试器 CE 全称 Cheat Engine，是一款专注于游戏的修改器。它可以用来扫描游戏中的内存，并允许修改它们。 前置知识IHDR 在PNG格式图像中，文件头数据块（IHDR）是第一个出现的数据块，用于描述整个图像的基本属性和特征。文件头数据块的标识符为IHDR，包含13个字节的数据。 获取相关信息获取二维码图片偏移 打开微信，保持停留在登录二维码界面 打开CE，附加微信进程，附加后搜索IHDR，校正地址-c，显示出 png 打开OD，附件微信进程，dd找出来的指针地址补充：通过dc [地址] 查看内容 通过dm 命令打印内容 新建一个文件 打印.txt 输入如下内容[064FB580] 表示上面找到的指针地址，在OD中查看E78表示图片的大小 ，在OD中查看“w_qrcode”表示保存的图片名称，可以自定义 注意： 图片保存地址为微信的安装目录 获取二维码hook偏移在数据窗口找到的地址上，下一个内存写入断点，通过刷新二维码进行单步调试，直到找到合适的hook地址，最好找到一个寄存器中的地址与数据窗口中的图片地址相近的。 二维码Hook偏移： 376A05 &#x3D; 指令地址-WechatWin.dll基址 &#x3D; 6C286A05-6BF10000二维码图片地址偏移： 3230 &#x3D; 064FB580-064F8350(ECX)二维码图片地址： ECX + 3230二维码图片大小地址： ECX + 0x3230 + 0x4 WechatWin.dll的基址可以在OD上方工具栏的e中进行查看，也可以在CE中手动填加地址获取 获取指令A的偏移call偏移： 132F032 &#x3D; 6D23F032-6BF10000 获取指令B的偏移要返回的地址偏移： 376A0A &#x3D; 6C286A0A-6BF10000"},{"title":"Visual Studio 2017的安装","date":"2023-09-17T16:00:00.000Z","url":"/202309/7775ce8975d9.html","tags":[["C++","/tags/C/"],["Visual Studio","/tags/Visual-Studio/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["10-Wechat Hook相关笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10-Wechat-Hook%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"]],"content":" 下载软件 下载地址：  安装 双击下载好的 vs_community.exe 工作负载选择: 使用C++的桌面开发安装位置选择： 建议安装到系统盘以外的磁盘其余默认即可 安装完成后的选择 开发设置选择： Visual C++颜色主题选择： 随意点击启动 "},{"title":"02.DLL注入工具开发","date":"2023-09-11T16:00:00.000Z","url":"/202309/f235a329a98f.html","tags":[["Wechat","/tags/Wechat/"],["Hook","/tags/Hook/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["10-Wechat Hook相关笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10-Wechat-Hook%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"]]},{"title":"03.微信多开","date":"2023-09-11T16:00:00.000Z","url":"/202309/ff917af0e76f.html","tags":[["Wechat","/tags/Wechat/"],["Hook","/tags/Hook/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["10-Wechat Hook相关笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10-Wechat-Hook%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"]],"content":"关键点： CreateMuteX"},{"title":"Win32 API 开发","date":"2023-09-11T16:00:00.000Z","url":"/202309/96298f62c212.html","tags":[["Visual Studio","/tags/Visual-Studio/"],["win32","/tags/win32/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["10-Wechat Hook相关笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10-Wechat-Hook%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"]],"content":"调试方法DOS窗口调试（推荐） 消息相关消息处理优化 乱码处理"},{"title":"01.寻找登录信息","date":"2023-09-08T16:00:00.000Z","url":"/202309/95c82dcc909d.html","tags":[["Wechat","/tags/Wechat/"],["Hook","/tags/Hook/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["10-Wechat Hook相关笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10-Wechat-Hook%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"]],"content":"OD的使用 od 状态是运行，但是微信还是点不动怎么办 选择上方工具栏t, Resume All Thread 如何获取WeChatWin.dll基址 选择上方工具栏e,找到WeChatWin.dll ，鼠标右键-》复制到剪贴板-》基址 寻找Hook地址 dd xxxxxxx xxxxxxx表示在CE中找到的地址 下断点：内存写入 F8 单步执行，直到找到可以改变状态的地址 计算偏移 Hook地址偏移 &#x3D; Hook地址 - 基址 &#x3D; 04149DCB-03B40000 &#x3D; 609DCB ECX Wxid &#x3D; ECX-4BC微信号 &#x3D; ECX-2C8头像 &#x3D; ECX-164昵称 &#x3D; ECX-444手机号 &#x3D; ECX-410 wxid_ekz12xg96xon22 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; WechatWin.dll基址 &#x3D; 78B70000 昵称 &#x3D; WeChatWin.dll+23630F4Wxid指针 &#x3D; WechatWin.dll+236307C微信号指针 &#x3D; WechatWin.dll+2363370头像指针 &#x3D; WechatWin.dll+23633D4 基本概念汇编语言中的概念,在C语言中，可以把这些寄存器当作变量看待 EAX 是累加器，它是很多加法乘法指令的缺省寄存器 比如：add eax,-2 ; &#x2F;&#x2F;可以认为是给变量eax加上-2这样的一个值 ECX 是计数器，是重复(REP)前缀指令和LOOP指令的内定计数器 EDX 总是被用来放整数除法产生的余数 EBX 是”基地址”(base)寄存器, 在内存寻址时存放基地址 ESP 专门用作堆栈指针，被形象地称为栈顶指针，堆栈的顶部是地址小的区域，压入堆栈的数据越多，ESP也就越来越小。在32位平台上，ESP每次减少4字节 EBP 寄存器存放当前线程的栈底指针 ESI 源索引寄存器 EDI 目标索引寄存器 EIP 寄存器存放下一个CPU指令存放的内存地址，当CPU执行完当前的指令后，从EIP寄存器中读取下一条指令的内存地址，然后继续执行"},{"title":"Git 相关知识","date":"2023-08-10T12:19:48.000Z","url":"/202308/c3cf87f83277.html","tags":[["git","/tags/git/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["07-Git相关笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/07-Git%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"]],"content":"Git 相关知识git常用命令git add 命令将修改文件提交到暂存区 git add 例如： git restore 命令撤销提交到暂存区的文件 git remote 命令显示所有远程仓库 git remote -v 显示所有远程仓库 例如： 这里 origin 为远程地址的别名 显示某个远程仓库 git remote show xxx（xxx为远程地址的别名）显示某个远程仓库的信息 例如： 添加远程版本库 git remote add [name] [url] 作用是添加远程版本库 name 是自己取的仓库的名字 url 是地址 这个也是经常用到的，添加之后 一般都是使用 git fetch –all 拉取代码 然后 git push name HEAD:refs&#x2F;for&#x2F;分支名 提交代码 这里的 name 就是刚才取的名字 删除远程仓库 git remote rm name 删除远程仓库 修改仓库名 git remote rename old_name new_name 修改仓库名 git branch 命令查看分支 追踪远程分支 git checkout 命令切换分支 创建新分支并切换到新分支 删除分支内的所有内容 git merge 命令 恢复文件，撤销修改 git stash 贮藏贮藏 应用贮藏 查看现有贮藏 移除贮藏 查看贮藏里具体内容 清空贮藏 git diff 比较比较差异 git配置 设置代理 .gitignore文件作用在任何当前工作的 Git 仓库中，每个文件都是这样的： 追踪的（tracked）- 这些是 Git 所知道的所有文件或目录。这些是新添加（用 git add 添加）和提交（用 git commit 提交）到主仓库的文件和目录。 未被追踪的（untracked） - 这些是在工作目录中创建的，但还没有被暂存（或用 git add 命令添加）的任何新文件或目录。 被忽略的（ignored） - 这些是 Git 知道的要全部排除、忽略或在 Git 仓库中不需要注意的所有文件或目录。本质上，这是一种告诉 Git 哪些未被追踪的文件应该保持不被追踪并且永远不会被提交的方法。 所有被忽略的文件都会被保存在一个 .gitignore 文件中。 .gitignore 文件是一个纯文本文件，包含了项目中所有指定的文件和文件夹的列表，这些文件和文件夹是 Git 应该忽略和不追踪的。 在 .gitignore 中，你可以通过提及特定文件或文件夹的名称或模式来告诉 Git 只忽略一个文件或一个文件夹。你也可以用同样的方法告诉 Git 忽略多个文件或文件夹。 创建通常，一个 .gitignore 文件会被放在仓库的根目录下。根目录也被称为父目录和当前工作目录。根目录包含了组成项目的所有文件和其他文件夹。 也就是说，你可以把它放在版本库的任何文件夹中。你甚至可以有多个 .gitignore 文件。 要在基于 Unix 的系统（如 macOS 或 Linux）上用命令行创建一个 .gitignore 文件，打开终端程序（如 macOS 上的 Terminal.app）。然后，用 cd 命令导航到包含项目的根文件夹，并输入以下命令，为你的目录创建一个 .gitignore 文件： 名字前面有点（.）的文件默认是隐藏的。 当单独使用 ls 命令时，隐藏的文件是不可见的。要从命令行查看所有的文件–包括隐藏的文件–请在 ls 命令中使用 -a 标志，如图所示： 在 .gitignore 文件中应包括什么？ 你应该考虑添加到 .gitignore 文件中的文件类型是任何不需要被提交的文件。 你可能出于安全原因不想提交它们，或者因为它们是你的本地文件，因此对与你在同一项目上工作的其他开发者来说是不必要的。 其中一些可能包括： 操作系统文件。每个操作系统（如 macOS、Windows 和 Linux）都会生成系统特定的隐藏文件，其他开发者不需要使用这些文件，因为他们的系统也会生成这些文件。例如，在 macOS 上，Finder 会生成一个 .DS_Store 文件，其中包括用户对文件夹的外观和显示的偏好，如图标的大小和位置。 由代码编辑器和 IDE（IDE 代表集成开发环境）等应用程序生成的配置文件。这些文件是为你、你的配置和你的偏好设置定制的。 从你的项目中使用的编程语言或框架自动生成的文件，以及编译后的代码特定文件，如 .o 文件。 由软件包管理器生成的文件夹，如 npm 的 node_modules 文件夹。这是一个用于保存和跟踪你在本地安装的每个软件包的依赖关系的文件夹。 包含敏感数据和个人信息的文件。这类文件的一些例子是含有你的凭证（用户名和密码）的文件和含有环境变量的文件，如 .env 文件（.env 文件含有需要保持安全和隐私的 API 密钥）。 运行时文件，如 .log 文件。它们提供关于操作系统的使用活动和错误的信息，以及在操作系统中发生的事件的历史。 设置忽略如果你想只忽略一个特定的文件，你需要提供该文件在项目根目录下的完整路径。 例如，如果你想忽略位于根目录下的 text.txt 文件，你可以做如下操作： 而如果你想忽略一个位于根目录下的 test 目录中的 text.txt 文件，你要做的是： 你也可以这样写上述内容： 如果你想忽略所有具有特定名称的文件，你需要写出该文件的字面名称。 例如，如果你想忽略任何 text.txt 文件，你可以在 .gitignore 中添加以下内容： 在这种情况下，你不需要提供特定文件的完整路径。这种模式将忽略位于项目中任何地方的具有该特定名称的所有文件。 要忽略整个目录及其所有内容，你需要包括目录的名称，并在最后加上斜线 /： 这个命令将忽略位于你的项目中任何地方的名为 test 的目录（包括目录中的其他文件和其他子目录）。 需要注意的是，如果你只写一个文件的名字或者只写目录的名字而不写斜线 /，那么这个模式将同时匹配任何带有这个名字的文件或目录： 如果你想忽略任何以特定单词开头的文件或目录怎么办？ 例如，你想忽略所有名称以 img 开头的文件和目录。要做到这一点，你需要指定你想忽略的名称，后面跟着 * 通配符选择器，像这样： 这个命令将忽略所有名字以 img 开头的文件和目录。 但是，如果你想忽略任何以特定单词结尾的文件或目录呢？ 如果你想忽略所有以特定文件扩展名结尾的文件，你需要使用 * 通配符选择器，后面跟你想忽略的文件扩展名。 例如，如果你想忽略所有以 .md 文件扩展名结尾的 markdown 文件，你可以在你的 .gitignore 文件中添加以下内容： 这个模式将匹配位于项目中任何地方的以 .md 为扩展名的任何文件。 前面，你看到了如何忽略所有以特定后缀结尾的文件。当你想做一个例外，而有一个后缀的文件你不想忽略的时候，会发生什么？ 假设你在你的 .gitignore 文件中添加了以下内容： 这个模式会忽略所有以 .md 结尾的文件，但你不希望 Git 忽略一个 README.md 文件。 要做到这一点，你需要使用带有感叹号的否定模式，即 !，来排除一个本来会被忽略的文件： 在 .gitignore 文件中使用这两种模式，所有以 .md 结尾的文件都会被忽略，除了 README.md 文件。 需要记住的是，如果你忽略了整个目录，这个模式就不起作用。 例如，你忽略了所有的 test 目录： 假设在一个 test 文件夹内，你有一个文件，example.md，你不想忽略它。 你不能像这样在一个被忽略的目录内排除一个文件： 补充如何忽略以前提交的文件 当你创建一个新的仓库时，最好的做法是创建一个 .gitignore 文件，包含所有你想忽略的文件和不同的文件模式–在提交之前。 Git 只能忽略尚未提交到仓库的未被追踪的文件。 如果你过去已经提交了一个文件，但希望没有提交，会发生什么？ 比如你不小心提交了一个存储环境变量的 .env 文件。 第一步：你首先需要更新 .gitignore 文件以包括 .env 文件： 第二步：现在，你需要告诉 Git 不要追踪这个文件，把它从索引中删除： git rm 命令，连同 --cached 选项，从版本库中删除文件，但不删除实际的文件。这意味着该文件仍然在你的本地系统和工作目录中作为一个被忽略的文件。 git status 会显示该文件已不在版本库中，而输入 ls 命令会显示该文件存在于你的本地文件系统中。 如果你想从版本库和你的本地系统中删除该文件，省略 --cached 选项。 第三步：接下来，用 git add 命令将 .gitignore 添加到暂存区： 第四步：最后，用 git commit 命令提交 .gitignore 文件： 如何检查被忽略的文件是被.gitignore中的哪一行生效的 其它git中文件名中文乱码问题 问题汇总git status 时有Untracked files 的文件，原因分析及解决方案 原因分析我们要真正弄明白问题的原因，我们就要先知道文件的几个状态。git在未 commit 之前有三种状态： Untracked files 未跟踪 Changes not staged for commit 未提交的更改 Changes to be committed 提交的更改 什么文件会是未跟踪的呢？那些新创建的或者从未add过的文件就是未跟踪的。此时有几种情况： **1. 我们创建了准备提交上去的，这种好办只要add了就可以了**。 2. 必须放在git工具目录中，但又不能提交的，比如保存了数据库密码的配置文件等的东西。 3. 我们不准备提交又没用的。 问题解决第一种情况直接add 第二种情况在git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，git就会自动忽略这些文件 .gitignore 文件 第三种情况我们不需要就删除就可以了：cleangit clean 是从你的工作目录种删除所有没有tracked(未跟踪)过的文件。要知道这个命令很危险，删除了就找不到了。但是如果已经git add . 就不会被删除。参数说明：n：显示将要被删除的文件以及目录d：删除未被添加到git路径中的文件以及目录（将.gitignore文件标记的文件全部删除）。f：强制执行（只会删除文件）x：删除没有被track的文件 使用 如何将本地项目推送到远程仓库第一步：把在本地项目文件夹下执行 git init 第二步：设置忽略文件内容 .gitignore 第三步：执行 git add . 第四步：git commit -m “初始化msg” 第五步：在gitee 或者github 建立远程仓库 第六步：将本地仓库和远程仓库建立关联（git remote add origin ） 第七步：推送到远程仓库（git push -u origin master） git clone 报错：error: xxxx bytes of body are still expected可能原因：项目过大 解决办法： "},{"title":"PHP 代码打包","date":"2023-08-01T12:19:48.000Z","url":"/202308/57d76910c18f.html","tags":[["git","/tags/git/"],["PHP","/tags/PHP/"],["代码打包","/tags/%E4%BB%A3%E7%A0%81%E6%89%93%E5%8C%85/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["PHP 代码打包","/categories/%E5%AE%9E%E6%88%98/PHP-%E4%BB%A3%E7%A0%81%E6%89%93%E5%8C%85/"]],"content":"PHP 代码打包 shell脚本 php脚本 打更新包步骤 运行shell脚本即可 打回滚包步骤 a）从上次更新打包节点迁出一个临时分支 b）复制本次打包生成的update&#x2F;updateFileList.txt内容 c）切换到迁出的分支，粘贴覆盖原update&#x2F;updateFileList.txt内容 d）修改update.sh，将step3之前的部分注视掉即可 e）执行update.sh打包，修改更新包名称为日期_rollback.zip PHP 代码更新"},{"title":"Linux 防火墙","date":"2023-07-22T16:00:00.000Z","url":"/202307/21e2f328ee23.html","tags":[["Linux","/tags/Linux/"],["防火墙","/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"],["iptables","/tags/iptables/"],["firewalld","/tags/firewalld/"],["es登录授权","/tags/es%E7%99%BB%E5%BD%95%E6%8E%88%E6%9D%83/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["06-Linux相关知识","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/06-Linux%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"]],"content":"Linux里的防火墙 注意：iptables 和 firewalld 服务不能同时启动 iptables 防火墙iptables 简介iptables是集成在Linux内核中的包过滤防火墙系统。使用iptable可以添加、删除具体的过滤规则，iptables默认维护着4个表和5个链，所有的防火墙策略规则都被分别写入这些表与链中 “四表”是指iptables的功能，默认的iptables规则表有filter表（过滤规则表）、nat表（地址转换规则表）、mangle（修改数据标记位规则表）、raw（跟踪数据表规则表）： filter表：控制数据包是否允许进出及转发，可以控制的链路有INPUT、FORWARD和OUTPUT。 nat表：控制数据包中地址转换，可以控制的链路有PREROUTING、INPUT、OUTPUT和POSTROUTING。 mangle：修改数据包中的原数据，可以控制的链路有PREROUTING、INPUT、OUTPUT、FORWARD和POSTROUTING。 raw：控制 nat 表中连接追踪机制的启用状况，可以控制的链路有 PREROUTING、OUTPUT。 “五链”是指内核中控制网络的NetFilter 定义的 5 个规则链。 每个规则表中包含多个数据链： INPUT（入站数据过滤）。 OUTPUT（出站数据过滤）。 FORWARD（转发数据过滤）。 PREROUTING（路由前过滤） POSTROUTING（路由后过滤）。 iptables 语法格式 查看 iptables 规则 清空 iptables 规则 添加 iptables 规则 删除某条规则 Firewalld 防火墙前言防火墙是Linux系统的主要的安全工具 ，可以提供基本的安全防护，在Linux历史上已经使用过的防火墙工具包括：ipfwadm、ipchains、iptables（即Centos6就是使用的iptables），而在firewalld中新引入了 区域（Zone）这个概念。 以前的iptables防火墙是静态的，每次修改都要求防火墙完全重启，这个过程包括内核netfilter防火墙模块的卸载和新配置所需模块的装载等，而模块的卸载将会破坏状态防火墙和确立建立的连接，现在firewalld可以动态管理防火墙，firewalld把netfilter的过滤功能集于一身。 基本操作启动、自启动、注销 查看状态 区域概念 一个 zone 就是一套过滤规则，数据包必须要经过某个 zone 才能入站或出站。不同 zone 中规则粒度粗细、安全强度都不尽相同。可以把 zone 看作是一个个出站或入站必须经过的安检门，有的严格、有的宽松、有的检查细致、有的检查粗略 每个 zone 单独对应一个 xml 配置文件，在目录 &#x2F;usr&#x2F;lib&#x2F;firewalld&#x2F;services&#x2F; 下，文件名为 &lt;zone名称&gt;.xml。自定义 zone 只需要添加一个 &lt;zone名称&gt;.xml 文件，然后在其中添加过滤规则即可 每个 zone 都有一个默认的处理行为，包括：default(省缺)、ACCEPT、REJECT、DROP 类型firewalld 将网卡对应到不同的区域（zone），zone 默认共有 9 个区域：block，dmz，drop，external，home，internal，public，trusted，work。 trusted（信任区域） 允许所有网络流量连接，即使没有开放任何服务，那么使用此 zone 的流量照样通过 public（公共区域） 默认的 zone，部分公开，不信任网络中其他计算机，只放行特定服务 external（外部区域） 允许与 ssh 预定义的服务传入流量，其余均拒绝。默认将通过此区域转发的 IPv4 传出流量进行地址伪装可用于为路由器启用了伪装功能的外部网络 home（家庭区域） 允许与 ssh、ipp-client、mdns、samba-client 或 dhcpv6-client 预定义的服务传入流量，其余均拒绝 internal（内部区域） 默认值时与 home 区域相同 work（工作区域） 允许与 ssh、ipp-client、dhcpv6-client 预定义的服务传入流量，其余均拒绝 dmz（隔离区域也称为非军事区域） 允许与 ssh 预定义的服务传入流量，其余均拒绝 block（限制区域） 任何流入的包都被拒绝，返回 icmp-host-prohibited 报文（ipv4）或 icmp6-adm-prohibited 报文（ipv6）。只允许由该系统初始化的网络连接 drop（丢弃区域） 任何流入的包都被丢弃，不做任何响应，只允许流出的数据包 firewalld 服务 在 &#x2F;usr&#x2F;lib&#x2F;firewalld&#x2F;services&#x2F; 目录中，还保存了另外一类配置文件，每个文件对应一项具体的网络服务，如 ssh 服务等 与之对应的配置文件中记录了各项服务所使用的 tcp&#x2F;udp 端口，在最新版本的 firewalld 中默认已经定义了 70 多种服务供我们使用 当默认提供的服务不够用或者需要自定义某项服务的端口时，我们需要将 service 配置文件放置在 &#x2F;etc&#x2F;firewalld&#x2F;services&#x2F; 目录中 正常情况下，firewalld是默认开启ssh服务的，当我们开启firewalld的时候，不会影响ssh连接。这个我们可以通过查看firewall配置文件确认。 但其实，防火墙开放服务时，会开放服务的默认端口。可以检查ssh端口是否是默认端口22. 发现端口是22，如果不是22,比如是2222那怎么办，修改public.xml即可 firewall-cmd 命令行配置工具查看防火墙状态 服务管理为了方便管理，firewalld预先定义了很多服务 ， 存 放 在**&#x2F;usr&#x2F;lib&#x2F;firewalld&#x2F;services&#x2F;**目录中，服务通过单个的XML 配置文件来指定。这些配置文件则按以下格式命名：service-name.xml，每个文件对应一项具体的网络服务，如 ssh 服 务等。与之对应的配置文件中记录了各项服务所使用的 tcp&#x2F;udp 端口。在最新版本的 firewalld 中默认已经定义了 70 多种服务供我们使用，对于每个网络区域，均可以配置允许访问的服务。当默认提供的服务不适用或者需要自定义某项服务的端口时，我们需要将 service 配置文件放置在&#x2F;etc&#x2F;firewalld&#x2F;services&#x2F; 目录中。service 配置具有以下优点。 通过服务名字来管理规则更加人性化 通过服务来组织端口分组的模式更加高效，如果一个服务使用了若干个网络端口，则服务的配置文件就相当于提供了到这些端口的规则管理的批量操作快捷方式 端口管理在进行服务配置时，预定义的网络服务可以使用服务名配置，服务所涉及的端口就会自动打开。但是，对于非预定义的服务只能手动为指定的区域添加端口。 两种配置模式 运行时模式（Runtime mode）表示 当前内存中运行的防火墙配置，在系统或 firewalld 服务重启、停止时配置将失效 永久模式（Permanent mode）表示重启防火墙或重新加载防火墙时的规则配置，是永久存储在配置 文件中的 firewall-cmd 命令工具与配置模式相关的选项有三个： –reload：重新加载防火墙规则并保持状态信息，即将永久配置应用为运行时配置 –permanent：带有此选项的命令用于设置永久性规则，这些规则只有在重新启动 firewalld 或重新加载防火墙规则时才会生效；若不带有此选项，表示用于设置运行时 规则 –runtime-to-permanent：将当前的运行时配置写入规则配置文件中，使之成为永久性 实战客户护网行动扫出elasticsearch的未授权访问漏洞，针对这个漏洞进行修复 限制9200端口的访问 对elasticsearch进行登录授权 firewalld 解决办法 查看firewalld服务状态 注意：开启防火墙前要确认 ssh 的 22端口以及mysql的3306、redis的6379、80等服务端口 cat &#x2F;etc&#x2F;firewalld&#x2F;zones&#x2F;public.xml 开启firewalld 查看已设置的富规则 因为客户环境使用的是docker 容器，所以官网描述 docker和firewall是有冲突的，具体冲突原因： 大概意思就是：firewall的底层是使用iptables进行数据过滤，建立在iptables之上，而docker使用iptables来进行网络隔离和管理，这可能会与 Docker 产生冲突。当 firewalld 启动或者重启的时候，将会从 iptables 中移除 DOCKER 的规则，从而影响了 Docker 的正常工作 解决docker 和 firewall 的冲突 让docker绕过firewall 【重要一】绕过iptables之后，有个弊端：容器内部无法访问外界IP。如果需要访问，那么打开firewalld防火墙，且开启NAT转发功能，详细步骤如下： 此外，建议firewall防火墙开启NAT转发功能，解决阻止docker容器访问外界IP见  【重要二】在打开firewalld防火墙，且开启NAT转发功能后，允许容器访问外界IP：1、容器访问本宿主机(物理&#x2F;虚拟机)IP，本宿主机的防火墙检测到的IP是容器IP， 所以本机防火墙需要放行docker网段（可见“firewall-cmd命令可参考”）2、访问其他外界物理&#x2F;虚拟机，外界物理&#x2F;虚拟机检测到的IP是容器所在宿主机IP。 参考： 开启防火墙 · 解决阻止docker容器访问外界IP ｜NAT转发 检查是否允许 NAT 转发 开启 NAT 转发 禁止防火墙 NAT 转发 查看php容器ip 针对php容器可以访问9200端口 注意：执行后，一定要 重新载入设置 firewall-cmd –reload 补充删除规则的命令 firewall-cmd –permanent –remove-rich-rule&#x3D;”rule family&#x3D;”ipv4” source address&#x3D;”172.17.0.3” port protocol&#x3D;”tcp” port&#x3D;”9200” accept” &amp;&amp; firewall-cmd –reload 开放8272、8306、6379端口 补充删除规则命令 firewall-cmd –zone&#x3D;public –remove-port&#x3D;9200&#x2F;tcp –permanent &amp;&amp; firewall-cmd –reload 查看已设置的规则 查看端口有没有生效 elasticsearch 登录授权 复制http-basic.zip文件到es容器指定目录docker cp http-basic.zip es654:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins 进入es容器docker exec -it es654 bash 解压文件cd plugins unzip http-basic.ziprm -rf http-basic.zip 配置http-baisc，设置es的版本信息cd http-basicvi plugin-descriptor.properties 配置escd &#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;configvi elasticsearch.yml 修改代码apps&#x2F;cosola_V10&#x2F;vendor&#x2F;elasticsearch&#x2F;elasticsearch&#x2F;src&#x2F;Elasticsearch&#x2F;ClientBuilder 624行 修改代码 重启es容器 docker restart es654 验证 http-basic curl 127.0.0.1:9200 curl –user user:pass 127.0.0.1:9200  浏览器 ip:9200 访问 "},{"title":"Mac 关闭谷歌浏览器自动更新","date":"2023-06-19T12:19:48.000Z","url":"/202306/f49693d1e942.html","tags":[["浏览器","/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"],["chrome","/tags/chrome/"],["自动更新","/tags/%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["实用方法","/categories/%E6%9D%82%E6%96%87/%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95/"]],"content":"Mac 关闭谷歌浏览器自动更新"},{"title":"数据库批量导入脚本","date":"2023-06-13T12:19:48.000Z","url":"/202306/46e6862d9f94.html","tags":[["MySQL","/tags/MySQL/"],["批量导入","/tags/%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5/"],["shell脚本","/tags/shell%E8%84%9A%E6%9C%AC/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["SHELL 脚本","/categories/%E5%AE%9E%E6%88%98/SHELL-%E8%84%9A%E6%9C%AC/"]],"content":"批量导入 关键分析： 自动备份windows server auto_backup_db.bat 关键分析： "},{"title":"14.SpringBoot 集成分页插件 PageHelper","date":"2023-05-15T12:19:48.000Z","url":"/202305/9fcbe0e7e6a6.html","tags":[["SpringBoot","/tags/SpringBoot/"],["分页插件","/tags/%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6/"],["PageHelper","/tags/PageHelper/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["01-Spring学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"SpringBoot 集成分页插件PageHelper 分页是一个项目中最基本的功能之一，当我们使用MyBatis进行数据库操作时，利用PageHelper可以很方便的帮我们完成分页功能的实现！ 1. 添加依赖 2. 添加配置application.yaml 3. 基本使用 4. 全局分页统一处理 事实上，第三步里已经完成了分页的实现了，只是返回的结果并不美观，且结果中的个别数据并不是我们常用的，所以说为了提升开发效率，就有必要进行统一处理 保留属性：当前页、每页数量、总页数、总条数、分页数据 定义分页统一处理类 CommonPage.java 控制器中调用示例： 至此，分页插件的集成就完成了！"},{"title":"端口占用处理","date":"2023-05-14T12:19:48.000Z","url":"/202305/6f17137110e7.html","tags":[["端口占用","/tags/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["实用方法","/categories/%E6%9D%82%E6%96%87/%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95/"]],"content":"端口占用处理由于在本地的IDEA上开发web，经常遇到重启服务时，端口被占用的问题！ Windows操作系统查询端口占用情况 查看指定PID的进程是属于哪个应用 结束进程强制（&#x2F;F参数）杀死 PID 为 9088 的所有进程包括子进程（&#x2F;T参数） Mac操作系统查询端口占用情况 结束进程用kill 可以加上-9参数强制停止，后面跟的是PID，停止上面进程方式如下： "},{"title":"13.SpringBoot 定义全局统一返回结果","date":"2023-05-11T12:19:48.000Z","url":"/202305/656dd17ce13b.html","tags":[["SpringBoot","/tags/SpringBoot/"],["全局统一返回结果","/tags/%E5%85%A8%E5%B1%80%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["01-Spring学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"SpringBoot 定义全局统一返回结果 在前后端分离的项目开发中，定义统一的返回结果格式可以提高开发的效率和沟通成本。 返回结构通常来说，返回结构中包含 code （返回码）、msg（返回消息说明）、data（返回数据），其中code、msg是强制要求返回数据的 格式如下： 返回码说明返回码一般会定义如下几种： 200 操作成功 500 操作失败 401 未登录或token过期 403 无访问权限 404 参数校验失败 当然，我们还可以根据项目需要定义自己的返回码即可 步骤说明第一步：定义返回码的接口 接口中规定两个方法：getCode、getMessage ErrorCode.java 第二步：定义返回码枚举类 ResultCode.java 第三步：定义返回结果统一生成类 关键一步，不然每次返回都得手动定义返回结果的结构 CommonResult.java "},{"title":"11.SpringBoot 整合统一异常处理","date":"2023-05-10T12:19:48.000Z","url":"/202305/f5895a9566b0.html","tags":[["SpringBoot","/tags/SpringBoot/"],["全局统一异常处理","/tags/%E5%85%A8%E5%B1%80%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["01-Spring学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"SpringBoot整合统一异常处理1. 背景首先要搞清楚为什么要进行统一的异常处理，不进行异常处理会发生什么？我们在开发的过程中，经常会遇到异常报错的情况，例如： 这个时候，对于我们的前端处理非常的不友好，因为返回的数据结构并不是统一的结果，不利于前端处理。那么这个时候我们就要对异常进行统一拦截，统一返回结果，方便异常记录和错误排查！ 2. 认识两个注解@RestControllerAdvice由@ReponseBody和@ControllerAdvice两部分组成。带有此注释的类型被视为控制器通知，其中@ExceptionHandler方法默认采用@ResponseBody语义，默认情况下，@ControllerAdvice中的方法全局应用于所有控制器 @ExceptionHandler用于处理特定处理程序类或处理程序方法中的异常，通常用来自定义异常的处理，可以认为它是一个异常拦截器。 @ExceptionHandler(xxx.class) 其中：xxx.class表示具体的异常类 3. SpringBoot 如何处理异常首先定义一个全局异常处理类，在类上加上@ControllerAdvice，然后在类里面通过@ExceptionHandler来对异常进行处理。 当前代码拦截了所有的异常，并通过统一返回结果类封装了返回结果，那么这个时候再看返回结果如下： 但是这样处理异常，范围有点太大了。如果我们想对某种异常进行单独的处理，那么我们再添加这种异常处理的方法就好了，就拿这个例子继续来说，增加一个更小范围的异常拦截 看结果： 可以看到，已经变成了我们预期的样子，说明我们的处理生效了。 关于@ControllerAdvice的文档说明 Specialization of @Component for classes that declare @ExceptionHandler, @InitBinder, or @ModelAttribute methods to be shared across multiple @Controller classes. 这个类是为那些声明了（@ExceptionHandler、@InitBinder 或 @ModelAttribute注解修饰的）方法的类而提供的专业化的@Component , 以供多个 Controller类所共享。 4. 自定义异常处理很简单，只要使用继承就可以了！ 在全局异常处理类中设置自定义异常拦截 设置断言处理类，用来处理各种自定义异常 使用场景如下： "},{"title":"12.SpringBoot 前后端分离项目跨域问题的处理","date":"2023-05-10T12:19:48.000Z","url":"/202305/6955218f31ac.html","tags":[["SpringBoot","/tags/SpringBoot/"],["跨域","/tags/%E8%B7%A8%E5%9F%9F/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["01-Spring学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"SpringBoot 前后端分离项目跨域问题的处理1. 什么是跨域跨域资源共享是由同源策略引发的，首先要了解同源策略。而要了解同源策略先要了解什么是“源”。 1.1 不同源则触发一个跨域的HTTP请求在浏览器中，当 “一个资源” 向 “与它所在的服务器不同的域、协议或端口” 请求一个资源时，该资源会发起一个跨域 HTTP 请求。浏览器可能“限制发起跨域请求”，或者是 “可以发起跨域请求，但是返回结果被浏览器拦截”。 出于安全原因，浏览器限制跨源HTTP请求。这意味着使用 Web应用程序只能从加载应用程序的同一个域请求HTTP资源，除非响应报文包含了正确CORS响应头。 1.2 同源策略同源策略是一个重要的安全策略，它用于限制一个origin的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。 也就是说，如果“源”相同，则运行访问。如果不同，则被限制。我们继续了解下什么是源 1.3 源源由三部分组成： 协议 主机（域名） 端口 只要三部分其中之一不一致，就是不同源。 浏览器的同源策略提升了安全性，然而在业务需求中仍然需要“访问不同源的资源”，于是提出了“CORS机制”。 现代浏览器支持使用 CORS，以降低跨域 HTTP 请求所带来的风险。CORS 机制允许 Web应用 进行跨域访问控制，从而使跨域数据传输得以安全进行。 2. CORS机制2.1 简介CORS机制就是使用额外的 HTTP头 来告诉浏览器 让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的资源 跨域资源请求分为： 服务器通过请求头来声明“允许的源站，和允许的资源” 预检请求 携带身份凭据（cookie等）的情形 2.2 一次完整的跨域请求1. 先发起一次OPTIONS请求进行预检 请求 响应 请求成功返回状态码 200 2. 发起真实的跨域请求 请求 响应 请求成功返回状态码 200 3. 解决方案3.1 覆盖默认的CorsFilter来解决该问题 添加GlobalCorsConfig配置文件来允许跨域访问 3.2 设置SpringSecurity允许OPTIONS请求访问设置完上面后，发现OPTIONS预检请求无法通过认证，则说明SpringBoot 整合的 SpringSecurity 没有对OPTION请求放开认证。那么我们就需要进行如下代码： "},{"title":"10.SpringBoot 整合 MinIo 对象存储服务","date":"2023-05-08T12:19:48.000Z","url":"/202305/12cf60594c3f.html","tags":[["SpringBoot","/tags/SpringBoot/"],["MinIo","/tags/MinIo/"],["对象存储","/tags/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["01-Spring学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"MinIo简介MinIO是在GNU Affero通用公共许可证v3.0下发布的高性能对象存储。API兼容Amazon S3云存储服务。使用MinIO为机器学习、分析和应用程序数据工作负载构建高性能基础架构。对象存储服务可以用来存储各类文件，例如图片、视频、日志文件、备份数据和容器&#x2F;虚拟机镜像等。 安装部署方式很多，这里使用docker安装方式 下载MinIo的docker镜像 在Docker容器中运行MinIO，这里我们将MiniIO的数据和配置文件夹挂载到宿主机上 访问127.0.0.1:9090 出现如下图界面表示成功，输入默认用户名密码登录即可。用户名和密码都是：minioadmin 创建Access Key 和 Secret Key accessKey : HLWj5NpOQ2bB9wYcXqhK secretKey: MzUH4UPnDUh3cGpbIQVRAtONLC7th0N9jnR1OFF7 上传文件及使用 通过使用MinIO的网页端即可完成文件的上传下载功能，下面我们以图片上传下载为例来演示下该功能 在存储文件之前，我们需要新建一个存储桶： 存储桶创建完成后，通过上传按钮可以上传文件，这里我们上传一张图片： 设置访问策略 这里有三种访问策略可以选择，一种只读、一种只写、一种可读可写，这里我们选择只读即可，但是需要注意的是，访问前缀需要设置为*.*，否则会无法访问； 设置完成后就可以通过地址永久访问了 访问效果 Spring boot 整合 Minio上传流程 整合 在pom.xml中添加MinIO的相关依赖： 在SpringBoot中开启文件上传功能，需要在application.yml添加如下配置： 添加一个MinioController控制器用于实现文件的上传和删除操作 在application.yml中对MinIO客户端进行配置： 启动我的SpringBoot应用，使用Postman来访问上传接口进行文件上传，上传接口地址:127.0.0.1:8080&#x2F;minio&#x2F;upload 上传完成 "},{"title":"09.Spring Security入门","date":"2023-05-06T12:19:48.000Z","url":"/202305/d33ad32255cb.html","tags":[["Spring Security","/tags/Spring-Security/"],["用户授权集成","/tags/%E7%94%A8%E6%88%B7%E6%8E%88%E6%9D%83%E9%9B%86%E6%88%90/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["01-Spring学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"Spring Security入门1. 认识认证流程 关键实现类： UsernamePasswordAuthenticationFilter ProviderManager DaoAuthenticationProvider InMemoryUserDetailsManager 1.1 认证流程 提交用户名和密码 封装Authentication对象，注意此处还没有权限 调用authenticate方法进行认证 调用DaoAuthenticationProvider的authenticate方法进行认证 调用loadUserByUsername方法查询用户 5.1 根据用户名去查询对应的用户及该用户对应的权限，InMemoryUserDetailsManager是在内存中查找 5.2 把对应的用户信息和权限信息封装到UserDetails对象 返回UserDetails对象 通过PasswordEncode对比UserDetails中的密码 和 Authentication 的密码是否正确 如果正确就把UserDetails中的权限信息设置到Authentication对象中 返回Authentication对象 如果上一步返回了Authentication对象，就使用 SecurityContextHolder.getContext().setAuthentication方法存储该对象。其他过滤器中会通过SecurityContextHolder来获取当前用户信息 2. 入门2.1 引入依赖 2.2 定义控制器 Controller 2.3 定义 service接口及实现类接口 实现类 2.4 定义UserDetailsService接口实现类 2.5 定义Dao接口及Mapper配置文件采用MyBatis框架做持久层 引入依赖 接口 mapper配置文件 配置mybatis生效配置文件 MyBatisConfig.java 2.5 定义UserDetails接口实现类作用：todo…. 2.6 定义security配置文件 2.7 定义数据表实体类 2.8 工具类JwtUtil.java作用：生产及验证token ErrorCode.java错误码接口 作用：用来规范错误码的实现 ResultCode.java返回码类，用来实现错误码 CommonResult.java返回结果格式定义类，用来统一接口返回结果，方便前端统一处理 自定义失败处理定义无论是认证失败还是授权失败后能和接口一样返回同样格式的 json ,这样能让前端对响应结果进行统一处理。 在Spring Security中，如果在认证或者授权的过程中出现了异常会被***ExceptionTranslationFilter*捕获到，然后ExceptionTranslationFilter**会去判断是认证失败还是授权失败产生的异常。 如果是认证过程中产生的异常，会被封装成**AuthenticationException，然后调用AuthenticationEntryPoint**对象的方法进行异常处理。 如果是授权过程中产生的异常，会被封装成**AccessDeniedException，然后调用AccessDeniedHandler**对象的方法去处理异常。 所以说要自定义失败处理，那么只需要自定义**AuthenticationEntryPoint和AccessDeniedHandler**，然后配置给Spring Security即可 认证失败处理 引入json工具类 自定义类，实现 AuthenticationEntryPoint 接口 配置到Spring Security 关键代码 全部配置 授权失败处理"},{"title":"08.JWT 的使用","date":"2023-05-05T12:19:48.000Z","url":"/202305/58b6ff9b5fae.html","tags":[["Java","/tags/Java/"],["JWT","/tags/JWT/"],["JWS","/tags/JWS/"],["JWK","/tags/JWK/"],["JWE","/tags/JWE/"],["JWA","/tags/JWA/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["01-Spring学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"什么是JWT、JWS、JWE、JWK、JWA前言Learn about the JOSE framework and its specifications, including JSON Web Token (JWT), JSON Web Signature (JWS), JSON Web Encryption (JWE), JSON Web Key (JWK), and JSON Web Algorithms (JWA) 了解 JOSE 框架及其规范，包括 JSON Web 令牌 (JWT)、JSON Web 签名 (JWS)、JSON Web 加密 (JWE)、JSON Web 密钥 (JWK) 和 JSON Web 算法 (JWA) JSON（JavaScript 对象表示法）是一种基于文本、独立于语言的格式，易于人类和机器理解。 JOSE（Javascript 对象签名和加密）是一个用于促进任意两方之间安全传输声明的框架。它的规范提供了一种对任何内容（不一定是 JSON）进行加密的通用方法。然而，它是基于 JSON 构建的，以便于在 Web 应用程序中使用。 JWT - JSON Web TokenJWT 是用于身份验证的标准机制。它是紧凑且 URL 安全的，用于表示在两方之间传输的声明。声明是一组键&#x2F;值对，它们为目标系统提供有关客户端的信息，以对其资源应用适当级别的访问控制。声明名称可以是注册名称 (IANA)、公共名称或私有名称。一些注册的声明名称是： “iss”：发行人声明 — 标识声明的发行人 “sub”：主题声明 — 标识声明的主题 “jti”：JWT ID — 唯一标识声明 结构JWT主要由三部分组成：头部、有效负载和签名，这些部分都是Base64 URL编码的。 标头用于标识用于生成签名的算法。 有效负载由用于验证令牌的声明和签名（密钥）组成。 发送信息的结构可以是序列化或反序列化。在序列化形式中，JWT 表示为包含标头、有效负载和由点分隔的签名的字符串。 下面是一个简单的JWT例子： Json Web Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzNDU2Nzg5LCJuYW1lIjoiSm9zZXBoIn0.OpOSSw7e485LOP5PrzScxHb7SR6sAOMRckfFwi4rp7o 这显示了解码后的 JSON Web Token。在反序列化形式中，JWT 仅包含Header和Payload作为纯 JSON 对象。 JWT是使用JWS或JWE实现的。 JWS - JSON Web SignatureJWS 用于在 JSON 数据结构的帮助下表示通过数字签名或基于哈希的消息身份验证代码 (HMAC) 保护的内容。它使用 JWS 签名以加密方式保护 JWS Header和 JWS Payload。这三个的编码字符串使用类似于 JWT 的点连接起来。使用的标识符和算法在 JSON Web 算法规范中指定。 JWS Header必须包含 alg 参数，因为它使用算法对 JWS 标头和 JWS 有效负载进行编码以生成 JWS 签名。对 JWS 标头和负载进行签名的一些常用算法包括： 使用 SHA-256 或 SHA-512 哈希算法的 HMAC（HS256、HS512） 使用 SHA-256 或 SHA-512 哈希算法的 RSA（RS256、RS512） JWS的例子： 它有一个编码的 JWS Header，后跟一个由“.”分隔的编码的 JWS Payload。 这是 JWS 签名输入，在使用 HMAC SHA-256 算法和 base64url 编码进行签名时，会给出编码的 JWS 签名值： 然后连接起来就是一个整体了 JWE - JSON Web EncryptionJSON Web Encryption 可以对 token 进行加密，以便只有预期的收件人才能读取它。它标准化了 JSON 数据结构中编码数据的表示方式。加密Payload的表示可以是 JWE compact serialization 或 JWE JSON serialization。 结构JWE compact serialization 形式有五个主要组成部分： JOSE Header JWE Encrypted Key JWE initialization vector &#x2F;&#x2F;初始化向量 JWE Ciphertext JWE Authentication Tag 所有这些组件均经过 base64url 编码并使用点 ( .) 连接。 JOSE Header（令牌的第一个元素）与前面提到的 JWT 和 JWS 的标头相同。 JWE 在Header中还有附加元素 —enc和zip. enc定义内容加密算法，而元素定义内容加密密钥 (CEK)alg的加密算法。 zip如果需要令牌压缩，则提供压缩算法。 在加密过程中，发行者会生成一个大小为 256 位的随机密钥，用于加密消息。它位于 JWE Encrypted key 部分。 一些加密算法需要一个初始化向量，它是一个随机生成的数字，与密钥一起使用来加密数据。这可以防止使用相同的密钥重复加密相同的数据。接收者需要此初始化向量来解密消息，因此被放置在 JWE Token中。 token的第四部分是通过加密明文 JSON Payload 计算出的 JWE 密文。它使用标头元素中提到的算法enc。 JWE Authentication Tag 是与密文一起生成的 JWE Token 的最后部分。它保证了密文的完整性。 JWK - JSON Web KeyJWK 是一种 JSON 结构，使用椭圆曲线 或 RSA 算法将一组公钥表示为 JSON 对象。公钥表示可以帮助用相应的私钥验证签名。 结构JWK 由 JWK 容器对象和 JWK 密钥对象数组组成。 JWK 容器对象是一个 JSON 对象，其中包含作为数组的特定成员。该成员是容器对象中必需的元素。 JWK 密钥对象存储在 JWK 容器对象的数组中。它们有一组所有键类型都通用的成员。如前所述，JWK Key 对象可以使用椭圆曲线或 RSA 算法。为此，该alg字段必须分别包含EC或RSA。以下是使用 RSA 的 JWK 示例： 它提供一个用于匹配的密钥 ID。 JWA — JSON Web AlgorithmsJWA规范主要集中于枚举JWS、JWK和JWE所需的算法。它还描述了特定于这些算法和密钥类型的操作。 JWS 算法：这些算法用于对 JWS 标头和 JWS 有效负载的内容进行签名 JWE 算法：这些算法对内容加密密钥 (CEK) 进行加密并生成 JWE 加密密钥 JWK 的算法： JWA 指定了一组用于 JWK 表示的公钥的算法系列 JWT的使用前言JWT 主要用于用户登录鉴权，针对前后端分离的项目，大多是通过 token 进行身份认证来进行交互，今天将介绍一种简单的创建 token 的方式 – JWT 基本介绍2.1 定义JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用 JWT 在用户和服务器之间传递安全可靠的信息。 2.2 组成部分一个 JWT 实际上就是一个字符串，它由三部分组成，头部、载荷、签名。前两部分需要经过 Base64 编码，后一部分通过前两部分 Base64 编码后再加密而成 2.2.1 头部（Header）JWT 第一部分是头部分，它是一个描述 JWT 元数据的 Json 对象，通常头部用于描述关于该 JWT 的最基本的信息，例如其类型以及签名所用的算法等 例如： alg 属性表示签名使用的算法，默认为 HMAC SHA256（写为HS256），typ 属性表示令牌的类型，JWT 令牌统一写为JWT。 最后，使用Base64 URL 算法将上述 JSON 对象转换为字符串保存 2.2.2 载荷（playload）JWT 第二部分是 Payload，也是一个 Json 对象。这部分是存放有效信息的地方，这些有效信息包含三个部分 标准中注册的声明（建议但不强制使用） 公共的声明（自定义声明） 公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息，但不建议添加敏感信息，因为默认情况下 JWT 是未加密的，任何人都可以解读其内容，即使加密了在客户端也是可以解密的。例如： 该JSON 对象也是使用 Base64 URL 算法转换为字符串后保存，是可以反向反编码回原样的，这也是为什么不要在 JWT 中放敏感数据的原因 私有的声明 私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64 是对称解密的，意味着该部分信息可以归类为明文信息 注意：载荷中的这3个声明并不是都要同时设置。 2.2.3 签名（signature）JWT的第三部分是一个签证信息。 这个部分需要 Base64 加密后的 header 和 Base64 加密后的 payload 使用 “.” 连接组成的字符串，然后通过 header 中声明的加密方式进行加盐 secret 组合加密，然后就构成了 JWT 的第三部分。 由于 secret 仅仅保存在服务器中，保证不能让其他用户知道，所以避免了反向解密 那么服务端是如何进行验证的呢？ 利用 JWT 前两段，用同一套哈希算法和同一个 secret 计算一个签名值，然后把计算出来的签名值和收到的 JWT 第三段比较，如果相同则认证通过。 2.3 JWT 的优点 json格式的通用性，所以JWT可以跨语言支持，比如Java、JavaScript、PHP、Node等等。 可以利用Payload存储一些非敏感的信息。 便于传输，JWT结构简单，字节占用小。 不需要在服务端保存会话信息，易于应用的扩展。 实战通过上述的介绍，我们已经了解到什么是 JWT 以及 JWT 生成的规则，现在我们通过代码方式来生成 JWT。 JWT 官网提供了通过不同编程语言来创建 JWT 的工具类&#x2F;库，此次测试我们选用 JJWT 。 3.1 引入依赖 3.2 创建工具类用于创建(生成) jwt 字符串和解析 jwt JwtUtil.java application.yaml 3.3 测试类 "},{"title":"07.数据库连接池","date":"2023-05-03T12:19:48.000Z","url":"/202305/6ff02286507f.html","tags":[["Spring Boot","/tags/Spring-Boot/"],["数据库连接池","/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"],["Druid","/tags/Druid/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["01-Spring学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"数据库连接池 Druid (德鲁伊)1. JDBC数据库连接池的必要性在使用开发基于数据库的web程序时，传统的模式基本是按以下步骤 1）在主程序（如servlet、beans）中建立数据库连接 2）进行sql操作 3）断开数据库连接 这种模式开发，存在的问题: 普通的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection加载到内存中，再验证用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求 一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。数据库的连接资源并没有得到很 好的重复利用。若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严 重的甚至会造成服务器的崩溃。 对于每一次数据库连接，使用完后都得断开。否则，如果程序出现异常而未能关闭，将会导致数据库系统 中的内存泄漏，最终将导致重启数据库。（回忆：何为Java的内存泄漏？） 这种开发不能控制被创建的连接对象数，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内 存泄漏，服务器崩溃 数据库连接池技术为解决传统开发中的数据库连接问题，可以采用数据库连接池技术。 2. 基本思想就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要 建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。 数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是重 新建立一个。 数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由最小数据库 连接数来设定的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池 的最大数据库连接数量限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连 接数量时，这些请求将被加入到等待队列中。 3. 优点1） 资源重用 由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一 方面也增加了系统运行环境的平稳性。 2） 更快的系统反应速度 数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均 已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销， 从而减少了系统的响应时间 3） 新的资源分配手段 对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库 连接数的限制，避免某一应用独占所有的数据库资源 4） 统一的连接管理，避免数据库连接泄漏 在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据 库连接操作中可能出现的资源泄露 4. DataSourceDataSource 通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把 DataSource 称为连接 池 DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速 度。 特别注意：数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个 数据源即可。 当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数 据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。 5. Druid（德鲁伊）数据库连接池Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了 日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，可以说是目前最好的 连接池之一。 常用配置项： 配置项 默认 说明 initial-size 0 初始化时建立的物理连接个数 max-active 8 最大连接数 min-idle 最小连接数 "},{"title":"05.SpringMVC","date":"2023-04-30T12:19:48.000Z","url":"/202304/c65b98e21225.html","tags":[["Spring","/tags/Spring/"],["SpringMVC","/tags/SpringMVC/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["01-Spring学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]]},{"title":"06.Spring Boot","date":"2023-04-30T12:19:48.000Z","url":"/202304/699c14f983e8.html","tags":[["Spring Boot","/tags/Spring-Boot/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["01-Spring学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"Spring Boot简介：Spring Boot创建可以运行的独立的、基于Spring的生产级应用程序。可以轻松入门。大多数Spring Boot应用程序只需要很少的Spring配置 本文基于 Spring Boot 2.7.11 1. 快速入门 jdk8及以上 Spring Framework 5.3.27及以上 Maven 3.5 + 1.1 创建一个Maven工程pom.xml 1.2 开发第一个应用创建一个java入口文件 MyApplication.java 至此，在IDEA中点击运行即可使用 localhost:8080访问 hello world 1.3 创建可执行jar包要创建一个可执行的jar，我们需要将spring-boot-maven-plugin添加到pom.xml中。为此，在依赖项部分下面插入以下几行 执行mvn package完成打包 在target目录下生成了Springboot-1.0-SNAPSHOT.jar 在命令行运行如下命令即可 结果如下： 2. 注解2.1 @Configuration 注解 配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单实例的 配置了本身也是组件 proxyBeanMethods：代理bean对象 ​ Full( proxyBeanMethods &#x3D; true ) 全量模式 ，设为true表示从容器中去寻找创建的对象 ​ Lite( proxyBeanMethods &#x3D; false ) 轻量模式，设为false表示重新创建一个新的对象 2.2 @Import 注解 给容器中自动引入类组件，默认组件的名字就是全类名 2.3 @Conditional条件装配 @ConditionalOnBean 如果容器中存在指定类，则注入当前注解修饰的这个bean，否则不注入 @ConditionalOnMissingClass 如果容器中不存在指定的类，则注入当前注解修饰的类 2.4 @ImportResource 注解 2.5 @ConfigurationProperties自动绑定配置文件中的初始值 application.properties 方式一 作用在Bean类上 方式二 作用在配置类上 3. Developer Toolsspring-boot-devtools模块可以包含在任何项目中，以提供额外的开发时特性。要包含devtools支持，将模块依赖项添加到构建中 快捷键 command + F9 工具栏：构建-》构建项目 作用：检测代码变化后自动构建，可以认为是热更新，实质还是重新运行项目 4. 神器 Spring Initailizr项目初始化向导 IDEA创建Springboot项目神器：工具栏-》文件-》新建-》项目-》Spring Initailizr 5. yaml配置文件详解5.1 基本介绍1）YAML是 JSON 的超集，简洁而强大，是一种专门用来书写配置文件的语言，可以替代 application.properties 2）在创建一个 SpringBoot 项目时，引入的 spring-boot-starter-web 依赖间接地引入了 snakeyaml 依赖， snakeyaml 会实现对 YAML 配置的解析 3）YAML 的使用非常简单，利用缩进来表示层级关系，并且大小写敏感。 5.2 YAML 配置与Properties 配置的比较1）可以使用 @PropertySource 注解加载自定义的 Properties 配置文件，但无法加载自定义的 YAML 文件 2）YAML 支持列表的配置，而 Properties 不支持 5.3 语法结构 key: value； kv之间有空格 大小写敏感 使用缩进表示层级关系 缩进不允许tab,只允许空格 缩进的格数不重要，只要相同层级的元素左对齐即可 #号表示注释 单引号与双引号表示的字符串内容 会被 转义&#x2F;不转义 5.4 数据类型 字面量：单个的、不可再分的值。date、boolean、string、number、null 对象：键值对的集合。map、hash、set、object 数组：一组按次序排列的值。array、list、queue 5.5 示例Person.java Pet.java application.yaml 5.6 配置提示功能5.6.1 引入依赖 5.6.2 打包排除当前依赖 6. Web 开发6.1 简单功能分析6.1.1 静态资源访问1. 静态资源目录 类路径下：called &#x2F;static (or &#x2F;public or &#x2F;resources or**&#x2F;META-INF&#x2F;resources**） 2.静态资源访问前缀 默认：无前缀 6.1.2 欢迎页Spring Boot支持静态和模板化的欢迎页面。它首先在配置的静态内容位置中查找index.html文件。如果没有找到，则查找索引模板。如果找到任何一个，它将自动用作应用程序的欢迎页面 如果配置类静态资源访问前缀，则欢迎页失效 6.1.3 favicon.ico与其他静态资源一样，Spring Boot在配置的静态内容位置中检查favicon.ico。如果存在这样的文件，它将自动用作应用程序的图标 如果配置类静态资源访问前缀，则favicon.ico失效 6.2 请求参数处理6.2.1 请求映射核心Filter: HiddenHttpMethodFilter Springboot 配置类 WebMvcAutoConfiguration.java 使用REST风格，需要在配置文件中开启下面的配置 测试 6.2.2 普通参数与基本注解注解： @PathVariable 路径变量 @RequestHeader 请求头信息 @RequestParam 获取请求参数 @CookieValue 获取cookie @RequestBody 获取post请求体数据 @RequestAttribute 获取请求域属性，通常用于跳转后到新页面获取携带信息 @MatrixVariable 矩阵变量 配置类 控制器类 前端代码 Servlet API WebRequest ServletRequest MultipartRequest HttpSession javax.servlet.http.PushBuilder Principal InputStream Reader HttpMethod Locale TimeZone ZoneId 复杂参数 Map 可以给request域中放数据 Errors&#x2F;BindingResult Model 可以给request域中放数据 RedirectAttributes 重定向携带数据 ServletResponse 可以给request域中放数据 SessionStatus UriComponentsBuilder ServletUriComponentsBuilder 6.4 响应数据与内容协商6.5 视图解析与模版引擎6.6 拦截器6.7 跨域6.8 异常处理6.9 原生组件注入6.10 嵌入式Web容器6.11 定制化原理"},{"title":"04.Spring 整合 MyBatis","date":"2023-04-29T12:19:48.000Z","url":"/202304/352ed6ec0daf.html","tags":[["Spring","/tags/Spring/"],["MyBatis","/tags/MyBatis/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["01-Spring学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"Spring 整合 MyBatis任何框架整合Spring的目的只有一个：把该框架常用的工具对象交给 Spring 管理，要用的时候去容器中取m ybatis 工具对象； 1. 入门示例 在resources目录下创建数据库配置文件（db.properties） 引入相关依赖 准备pojo类 准备dao接口 数据访问层，具体到对于某个表的增删改查，也就是说某个DAO一定是和数据库的某一张表一一对应的，其中封装了增删改查基本操作 准备Mapper映射文件 UserMapper.xml 与Dao接口中的方法一一对应 service层 服务层，被称为服务，粗略的理解就是对一个或多个DAO进行的再次封装，封装成一个服务，通常先设计接口，再创建实现类，接下来就可以在service层调用接口进行业务逻辑应用的处理。 接口 实现类 创建整合配置文件ApplicationConfig.xml 测试 "},{"title":"03.Spring 整合 Junit","date":"2023-04-28T12:19:48.000Z","url":"/202304/446083d00491.html","tags":[["Spring","/tags/Spring/"],["Junit","/tags/Junit/"],["单元测试","/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["01-Spring学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"Spring 整合Junit1. 整合 Junit51.1 引入依赖 1.2 配置bean 1.3 创建类 1.4 测试 2. 整合 Junit42.1 引入依赖 2.2 测试"},{"title":"MyBatis学习笔记","date":"2023-04-28T11:19:48.000Z","url":"/202304/c3b47385f834.html","tags":[["Spring","/tags/Spring/"],["MyBatis","/tags/MyBatis/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["02-MyBatis学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02-MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"MyBatis 用法MyBatis文档 MyBatis入门查询user表中所有数据 创建user表，添加数据 创建模块，导入坐标 编写 MyBatis 核心配置文件 –&gt; 替换连接信息，解决硬编码问题 (mybatis-config.xml放在资源目录下) 编写 SQL 映射文件 –&gt; 统一管理sql语句，解决硬编码问题 (如UserMapper.xml等，放在资源目录下对应的包目录下，包目录与实体类目录结构保持一致) 编码1）定义POJO类(实体类)2）加载核心配置文件，获取 SqlSessionFactory 对象3）获取SqlSession 对象，执行 SQL 语句4）释放资源 Mapper代理开发 它不依赖于字符串字面值，会更安全一点 示例 定义与SQL映射文件同名的Mapper接口，并且将Mapper接口和SQL映射文件放置在同一目录下 设置SQL映射文件的namespace属性为Mapper接口全限定名 在Mapper接口中定义方法，方法名就是SQL映射文件中的SQL语句的id，并保持参数类型和返回值类型一致 编码 1）通过SqlSession的getMapper方法获取Mapper接口的代理对象 2）调用对应方法完成sql的执行 注意：如果Mapper接口名称和SQL映射文件名称相同，并在同一目录下，则可以使用包扫描的方式简化SQL映射文件的加载mybatis-config.xml MyBatis核型配置文件 environments 可以配置成适应多种环境,不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。 typeAliases 类型别名：它仅用于 XML 配置，意在降低冗余的全限定类名书写 配置文件完成增删改查 安装MyBatisX插件 查询 查询所有数据 步骤：a)编写mapper接口b)编写sql语句c)执行测试方法 添加获取插入数据的ID useGeneratedKeys、keyProperty 修改 修改全部字段 修改动态字段 删除 删除一个 批量删除 注解完成增删改查@Select、@Insert、@Delete、@Update 实战入门引入相关依赖 配置文件在resources目录下新建mybatis-config.xml配置文件 新建POJO类全路径：src&#x2F;main&#x2F;java&#x2F;com&#x2F;example&#x2F;pojo&#x2F;Brand.java 安装 MyBatisX 插件打开IDEA-&gt;Preferences-&gt;插件，安装MyBatisX 作用： 创建mapper接口全路径：src&#x2F;main&#x2F;java&#x2F;com&#x2F;example&#x2F;mapper&#x2F;BrandMapper.java 创建对应的mapper映射文件全路径：src&#x2F;main&#x2F;resources&#x2F;com&#x2F;example&#x2F;mapper&#x2F;BrandMapper.xml 测试"},{"title":"02.Spring 面向切面 AOP","date":"2023-04-27T12:19:48.000Z","url":"/202304/5d14e246ff7a.html","tags":[["Spring","/tags/Spring/"],["AOP","/tags/AOP/"],["面向切面","/tags/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["01-Spring学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"Spring 面向切面 AOP1. 入门案例定义接口 定义实现类 代理类 测试 2.概念和术语2.1 概念AOP 从程序运行的角度考虑程序的流程，提取业务处理过程的切面。AOP 面向的是程序运行的各个步骤，希望以更好的方式来组合业务处理的各个步骤。AOP 框架不与特定的代码耦合，它能处理程序执行中特定的切入点（Pointcut）,而不与某个具体类耦合。 特征 各步骤之间的良好隔离性 源代码无关性 2.2 术语 术语 名称 解释 Aspect 切面 用于组织多个Advice，Advice被放在切面中定义。 Joinpoint 连接点 程序执行过程中明确的点，如方法的调用或者异常的抛出。在Spring AOP中，连接点总是方法的调用 Advice 增强处理 AOP框架在特定的切入点执行的增强处理。处理有“around” “before” “after” 等类型 Pointcut 切入点 可以出入增强处理的连接点。 引入 将方法或字段添加到被处理的类中 目标对象 被AOP框架进行增强处理的对象，也被称为被增强的对象 AOP代理 AOP框架创建的对象 Weaving 织入 将增强处理添加到目标对象中，并创建一个被增强的对象的过程就是织入。 2.3 基于注解的AOP2.3.1 实验一 引入依赖 创建目标资源 1)接口 创建切面类并配置 1)切面类 ​ 2)配置文件 注意引入xml依赖 测试 2.3.2 重用切入点表达式 声明 在同一切面中使用 在不同切面中使用 2.3.3 切面的优先级相同目标方法上同时存在多个切面时，切面的优先级控制切面的内外嵌套顺序。 优先级高的切面：外面 优先级低的切面：里面 使用@Order注解可以控制切面的优先级 @Order(较小的数)：优先级高 @Order(较大的数)：优先级低 2.4 基于XML的AOP2.4.1 实验一1.准备工作 参考基于注解的AOP 2.配置文件 "},{"title":"01.Spring-IoC 控制反转","date":"2023-04-26T11:19:48.000Z","url":"/202304/a1c1691ebce3.html","tags":[["Spring","/tags/Spring/"],["IoC","/tags/IoC/"],["控制反转","/tags/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["01-Spring学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"Spring IoC控制反转概念IoC作用：Spring 通过IoC 容器来管理所有 Java 对象的实例化和初始化，控制对象与对象之间的依赖关系 我们将由 IoC 容器管理的 Java 对象称为 Spring Bean，它与使用关键字 new 创建的 Java 对象没有任何区别 依赖注入DI (Dependency Injection) 依赖注入 IoC 是思想，DI 是实现 概念： 指Spring创建对象的过程中，将对象依赖属性通过配置进行注入 基于XML管理bean入门案例TestUser.java beans.xml User.java 获取bean的三种方式 根据ID获取 根据class获取 根据id和class获取 扩展知识 如果组件类实现了接口，根据接口类型可以获取bean吗? 可以 如果一个接口有多个实现类，这些实现类都配置了bean，那么根据接口类型可以获取bean吗？ 不可以，因为bean不唯一 注入方式原生注入方法： 第一种：set注入 第二种：构造注入 特殊属性类型注入 对象类型属性注入 关键字 ref ​ 数组类型属性注入 关键字 array ​ 集合类型属性注入 1）list集合 ​ 2）map集合 ​ 3）引用集合类型的bean 需要在xml中增加相关约束 ​ 4）p命名空间注入 引入外部文件注入 常见场景：数据库配置文件 1）引入相关依赖 2）创建外部属性文件jdbc.properties 3）创建spring配置文件，引入context命名空间，引入属性文件，使用表达式完成注入 4）配置bean 5）测试 bean的作用域1）概念 在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围 取值 含义 创建对象的时机 singleton 在IoC容器中，这个bean的对象始终为单实例 IoC容器初始化 prototype 这个bean在IoC容器中有多个实例 获取bean时 bean的生命周期1）调用无参数构造器，创建bean对象 2）给bean对象设置属性值 3）bean后置处理器（初始化之前） 4）bean对象初始化（调用指定的初始化方法） 5）bean后置处理器（初始化之后） 6）bean对象创建完成了，可以使用了 7）bean对象销毁（配置指定销毁的方法） 8）IoC容器关闭 第一步：创建类 User.java MyPost.java 第二步：配置bean 第三步：测试 FactoryBean简介：FactoryBean是Spring提供的一种整合第三方框架的常用机制。和普通的bean不同，配置一个FactoryBean类型的bean，在获取bean的时候得到的并不是class属性中配置的这个类的对象，而是getObject()方法的返回值。通过这种机制，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节屏蔽起来，只把最简洁的使用界面展示给我们。 将来我们整合MyBatis时，Spring就是通过FactoryBean机制来帮我们创建SqlSessionFactory对象的。 1）创建类UserFactoryBean 2）配置bean 3）测试 基于xml自动装配 根据指定的策略，在IoC容器中匹配某一个bean，自动为指定的bean中所依赖的类类型或接口类型属性赋值 基于注解管理bean概念代码中的一种特殊标记，格式：@注解名称(属性1&#x3D;属性值…)；简化Spring的XML配置； Spring 通过注解实现自动装配的步骤如下： 引入依赖 开启组件扫描 使用注解定义Bean 依赖注入 引入依赖 注意：logback.xml放在resource下，内容如下： 开启组件扫描新建beans.xml，引入context命名空间，开启组件扫描。开启扫描后，Spring会自动扫描配置路径下的所有java类，并创建Bean实例 使用注解定义BeanSpring提供了以下几个注解来标注Spring Bean @Component：标注一个普通的Spring Bean类 @Controller：标注一个控制器组件类 @Service：标注一个业务逻辑组件类 @Repository：标注一个DAO组件类 依赖注入@Autowired 属性注入 setter方法注入 构造方法注入 形参上注入 @Autowired注解和@Qualifier注解联合实现 按名称自动注入 全注解开发就是不再使用spring配置文件了，写一个配置类来代替配置文件 配置类 测试类 "},{"title":"docker 容器虚拟化网络","date":"2023-03-27T19:11:00.000Z","url":"/202303/8fc75945799f.html","tags":[["docker","/tags/docker/"],["容器","/tags/%E5%AE%B9%E5%99%A8/"],["docker网络","/tags/docker%E7%BD%91%E7%BB%9C/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["08-docker相关笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/08-docker%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"]],"content":"容器虚拟化网络查看docker支持的网络模型 查看桥接式网络元数据 自定义桥接网络模型 把容器加入自定义网络中 把容器从自定义网络中移除 容器内安装ifconfig、ping等容器内提取最新包信息 E: List directory &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;partial is missing. - Acquire (13: Permission denied)报错表示权限不足解决办法：docker exec -u 0 -it [容器] bash 容器内安装net-tools（ifconfig命令） 容器内安装iputils-ping(ping命令) 容器内安装iproute2(ip addr命令) 容器内安装vim 容器内安装telnet 补充容器内部无法联通外部时使用"},{"title":"Sublime 的激活","date":"2023-03-16T16:00:00.000Z","url":"/202303/077058a0cd0d.html","tags":[["PHP","/tags/PHP/"],["编辑器","/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"],["Sublime","/tags/Sublime/"],["激活","/tags/%E6%BF%80%E6%B4%BB/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["03-编辑器相关笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03-%E7%BC%96%E8%BE%91%E5%99%A8%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"]],"content":"sublime4143激活教程windows 使用浏览器打开hexed.it 点击“打开文件”，选择sublime text 安装目录中的“sublime_text.exe” 在搜索框中输入807805000f94c1，找到后，替换为c64005014885c9 点击“另存为”，保存文件到本地，文件名设定为sublime_text.exe 备份原sublime_text.exe文件（修改为如sublime_text_bk.exe） 将新保存的sublime_text.exe复制到原sublime text 4安装目录中 mac 下载并安装APP“Hex Fiend”，Hex Fiend, a fast and clever hex editor for macOS 打开Sublime Text所在的目录： Sublime Text -&gt; (右键)Show Package -&gt;Contents -&gt; Mac OS -&gt; Sublime_text 打开Hex Fiend，将Sublime_text拖至Hex Fiend中 在搜索框中输入807805000f94c1，找到后，替换为 c64005014885c9 保存后，退出 在Terminal下，进入Sublime Text目录执行如下语句 打开sublime Text，激活成功。 相关软件下载地址：百度云盘链接:提取码: x2ga 使用查寻文件快捷键 分屏 在控制器里找方法 折叠代码块 安装phpmd工具phpmd工具可以用来查看php文件中哪些变量没有用到 安装phpmd 创建自定义 Build System 打开 Sublime Text，点击 Tools &gt; Build System &gt; New Build System。 在新打开的文件中，添加如下内容： 保存文件为 phpmd.sublime-build。 使用 Build System 检查未使用的变量 打开 PHP 文件。 点击 Tools &gt; Build System，选择 phpmd。 按 Ctrl+B 来运行 phpmd，会在 Sublime Text 下方的控制台中显示检测结果。 恢复关闭的标签页 自定义插件注释插件Sublime Text 本身的代码片段 (.sublime-snippet) 语法没有内置功能来动态获取当前时间，因此不能直接在代码片段中插入自动更新的时间。不过，有一些变通的方案可以在 Sublime Text 中实现通过其他方式插入时间： 步骤 1: 创建自定义 Python 插件 打开 Tools -&gt; Developer -&gt; New Plugin...。 删除默认的代码，并粘贴以下代码： 保存文件，命名为 insert_comment_with_timestamp.py，并放置到 Packages/User/ 目录下。 步骤 2: 设置键绑定现在需要设置键绑定，让这个插件通过快捷键触发： 点击 Preferences -&gt; Key Bindings。 在右侧的用户键绑定文件中添加以下代码： 这样，就可以通过 &#96;Ctrl + Alt + &#x2F; 快捷键来插入带有当前时间的注释。 使用效果：当按下 &#96;Ctrl + Alt + &#x2F;，Sublime Text 会自动插入类似以下的注释： "},{"title":"OpenSSH权限提升漏洞修复过程","date":"2022-09-30T16:00:00.000Z","url":"/202210/8286502aef6c.html","tags":[["漏洞","/tags/%E6%BC%8F%E6%B4%9E/"],["OpenSSH","/tags/OpenSSH/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["漏洞修复","/categories/%E5%AE%9E%E6%88%98/%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D/"]],"content":"OpenSSH权限提升漏洞(CVE-2021-41617) 升级ssh最好服务器现场有人支持，避免升级失败后无法恢复问题 漏洞详情OpenSSH是SSH（Secure SHell）协议的免费开源实现。 OpenSSH项目发布了OpenSSH 8.8安全更新，修复了OpenSSH 6.2 到 8.7版本中的 sshd(8)中的一个权限提升漏洞（CVE-2021-41617）。 当sshd(8)在执行AuthorizedKeysCommand或AuthorizedPrincipalsCommand时，未能正确地初始化，其中AuthorizedKeysCommandUser或AuthorizedPrincipalsCommandUser指令被设置为以非root用户身份运行。相反，这些命令将继承 sshd(8) 启动时的组的权限，根据系统配置的不同，继承的组可能会让辅助程序获得意外的权限，导致权限提升。在sshd_config(5)中，AuthorizedKeysCommand和AuthorizedPrincipalsCommand都没有被默认启用。 建议受影响用户做好资产自查以及预防工作，以免遭受黑客攻击。 影响范围OpenSSH版本6.2-8.7 解决方案注意！！！ 升级之前另外开启一个窗口，保持窗口不关闭，防止升级出错时恢复服务。 tail -300f &#x2F;var&#x2F;log&#x2F;messages 查看当前ssh版本 下载openssh并安装 备份并替换原文件 修改配置文件 重新加载 验证结果 "},{"title":"Redis 集群部署","date":"2022-07-31T16:00:00.000Z","url":"/202208/69d79e7a173e.html","tags":[["redis","/tags/redis/"],["redis集群","/tags/redis%E9%9B%86%E7%BE%A4/"],["哨兵","/tags/%E5%93%A8%E5%85%B5/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["04-Redis相关笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04-Redis%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"]],"content":"拉取镜像 修改别名 一主两从配置步骤创建主redis配置文件redis.conf vi &#x2F;Users&#x2F;xxxx&#x2F;Document&#x2F;docker&#x2F;redis&#x2F;redis1&#x2F;redis.conf 配置内容如下： 配置说明：logfile：日志文件在工作目录下dir：工作目录appendonly：是否需要持久化,yes为需要slaveof：指明为主机一的从机requirepass：redis客户端连接的认证密码,若不需要可不配置masterauth：主从redis同步的认证密码,与连接密码同,若不需要可不用配置 启动服务 创建第一个从redis配置文件redis.conf vi &#x2F;Users&#x2F;xxxx&#x2F;Document&#x2F;docker&#x2F;redis&#x2F;redis2&#x2F;redis.conf 配置文件内容如下： 配置说明：logfile：日志文件在工作目录下dir：工作目录appendonly：是否需要持久化,yes为需要slaveof：指明为主机一的从机requirepass：redis客户端连接的认证密码,若不需要可不配置masterauth：主从redis同步的认证密码,与连接密码同,若不需要可不用配置 启动服务 创建第二个从redis配置文件redis.conf 说明：类似与第一个从redis vi &#x2F;Users&#x2F;xxxx&#x2F;Document&#x2F;docker&#x2F;redis&#x2F;redis3&#x2F;redis.conf 配置文件内容如下： 配置说明：logfile：日志文件在工作目录下dir：工作目录appendonly：是否需要持久化,yes为需要slaveof：指明为主机一的从机requirepass：redis客户端连接的认证密码,若不需要可不配置masterauth：主从redis同步的认证密码,与连接密码同,若不需要可不用配置 启动服务 查看状态 查看主机状态 查看相关信息#Replicationrole:masterconnected_slaves:1 (如果从机配置好了则为1,否则0)… 查看从机状态 #Replicationrole:slavemaster_host:172.17.0.5… 验证主从关系master 写入 slave 读取 结果：lili 三个哨兵配置步骤创建redis哨兵1配置文件sentinel.conf vi &#x2F;Users&#x2F;xxxx&#x2F;Document&#x2F;docker&#x2F;redis&#x2F;sentinel1&#x2F;sentinel.conf 配置文件内容如下： 配置说明:daemonize yes 开启守护进程,以后台方式运行protected-mode no 是否开启保护模式logfile “sentinel.log”：输出日志目录sentinel monitor mymaster 192.168.0.1 6379 1：哨兵监控的主redis名称、ip、端口sentinel auth-pass mymaster 1234 ： 哨兵的认证密码(如果没有则不需要)3) 启动哨兵服务 创建redis哨兵2配置文件sentinel2.conf 类似哨兵1配置 vi &#x2F;Users&#x2F;xxxx&#x2F;Document&#x2F;docker&#x2F;redis&#x2F;sentinel2&#x2F;sentinel.conf 配置文件内容如下： 配置说明:daemonize yes 开启守护进程,以后台方式运行protected-mode no 是否开启保护模式logfile “sentinel.log”：输出日志目录sentinel monitor mymaster 192.168.0.1 6379 1：哨兵监控的主redis名称、ip、端口sentinel auth-pass mymaster 1234 ： 哨兵的认证密码(如果没有则不需要) 启动哨兵服务 创建redis哨兵3配置文件sentinel3.conf 类似哨兵1配置 vi &#x2F;Users&#x2F;xxxx&#x2F;Document&#x2F;docker&#x2F;redis&#x2F;sentinel3&#x2F;sentinel3.conf 配置文件内容如下： 配置说明:daemonize yes 开启守护进程,以后台方式运行protected-mode no 是否开启保护模式logfile “sentinel.log”：输出日志目录sentinel monitor mymaster 192.168.0.1 6379 1：哨兵监控的主redis名称、ip、端口sentinel auth-pass mymaster 1234 ： 哨兵的认证密码(如果没有则不需要) 启动哨兵服务 查看哨兵情况 #Sentinelsentinel_masters:1sentinel_tilt:0sentinel_running_scripts:0sentinel_scripts_queue_length:0sentinel_simulate_failure_flags:0master0:name&#x3D;mymaster,status&#x3D;ok,address&#x3D;192.168.0.1:6379,slaves&#x3D;2,sentinels&#x3D;4 验证哨兵模式 关闭redis_master主服务,查看redis_slave从服务是否会自动切换为主服务 #Replicationrole:masterconnected_slaves:1 (如果从机配置好了则为1,否则0)… 至此完成所有配置！！！"},{"title":"Linux 相关知识","date":"2022-01-31T16:00:00.000Z","url":"/202202/62f052386f03.html","tags":[["linux","/tags/linux/"],["常用命令","/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["06-Linux相关知识","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/06-Linux%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"]],"content":"Linux 相关知识常用命令查看当前目录占用空间大小 ls查看文件大小指定单位 排序 查看硬盘空间 Linux 基本信息展示 "},{"title":"Linux 磁盘空间爆满，服务无法访问","date":"2021-06-06T16:00:00.000Z","url":"/202106/dc413bc18979.html","tags":[["docker","/tags/docker/"],["磁盘爆满","/tags/%E7%A3%81%E7%9B%98%E7%88%86%E6%BB%A1/"],["容器","/tags/%E5%AE%B9%E5%99%A8/"],["Linux","/tags/Linux/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["问题处理","/categories/%E5%AE%9E%E6%88%98/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"]],"content":"原因：docker引擎默认是安装在系统盘下 &#x2F;var&#x2F;lib&#x2F;docker 一般来说系统盘比较小，当空间不够时会造成docker运行不正常 造成空间不足的原因： 没有用的镜像没有及时删除 没有用的容器没有及时删除 docker容器运行中产生的各种垃圾缓存 系统产生的垃圾 人为。。。 解决方案：把docker迁移到数据盘，所以根本问题是保证磁盘的空间充足 将docker的目录改到 &#x2F;data 下 "},{"title":"Docker常用命令","date":"2020-04-30T16:00:00.000Z","url":"/202005/c0876d966a1e.html","tags":[["docker","/tags/docker/"],["save","/tags/save/"],["load","/tags/load/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["08-docker相关笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/08-docker%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"]],"content":"镜像的导入导出导出 导入 容器导入、导出为镜像导出 导入 "},{"title":"Node 相关知识","date":"2020-01-31T16:00:00.000Z","url":"/202002/338072c120c8.html","tags":[["node","/tags/node/"],["npm","/tags/npm/"],["nvm","/tags/nvm/"],["依赖关系","/tags/%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["05-Node相关知识","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05-Node%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"]],"content":"node与npm 知识总结node 版本更新简介node.js是javascript的一种运行环境，是对Google V8引擎进行的封装，是一个服务器端的javascript的解释器。 使用 n注意：n命令不支持windows系統，只支持mac 简介一个简易的node版本管理工具 安装 使用 使用 nvm 进行更新简介nvm全名node.js version management，是一个node的版本管理工具。通过它可以安装和切换不同版本的nodejs 安装 windows 下载地址： 下载其中的 nvm-step.exe 安装即可 mac、linux 下载地址： nvm安装参考 nvm解决慢的问题 基本使用 查看 node 安装路径 npm 命令简介npm是nodejs的包管理器（package manager）。nodejs和npm是包含关系，nodejs中含有npm，安装好nodejs，cmd输入npm -v会发现npm的版本号，说明npm已经安装好。 其实我们在Node.js上开发时，会用到很多别人已经写好的javascript代码，如果每当我们需要别人的代码时，都根据名字搜索一下，下载源码，解压，再使用，会非常麻烦。于是就出现了包管理器npm。大家把自己写好的源码上传到npm官网上，如果要用某个或某些个，直接通过npm安装就可以了，不用管那个源码在哪里。并且如果我们要使用模块A，而模块A又依赖模块B，模块B又依赖模块C和D，此时npm会根据依赖关系，把所有依赖的包都下载下来并且管理起来 基本使用查看配置 查看当前源 设置镜像源 升级指定版本 清理缓存 depcheck 命令简介Depcheck 是一款用于分析项目中依赖关系的工具，它可以帮助我们找出以下问题：在 package.json 中，每个依赖包如何被使用、哪些依赖包没有用处、哪些依赖包缺失。它是解决前端项目中依赖包清理问题的一个常用工具 安装 基本使用"},{"title":"Memcache 漏洞修复","date":"2019-06-02T16:00:00.000Z","url":"/201906/9bcc155a804d.html","tags":[["memcache","/tags/memcache/"],["漏洞","/tags/%E6%BC%8F%E6%B4%9E/"],["Memcached未授权访问漏洞","/tags/Memcached%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["漏洞修复","/categories/%E5%AE%9E%E6%88%98/%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D/"]],"content":"memcache漏洞修复背景：Memcached未授权访问漏洞 查看memcache进程 杀死进程 启动"},{"title":"Web 服务器部署","date":"2019-05-31T16:00:00.000Z","url":"/201906/105bf4589af1.html","tags":[["memcache","/tags/memcache/"],["apache","/tags/apache/"],["php","/tags/php/"],["服务器部署","/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["Web服务器部署","/categories/%E5%AE%9E%E6%88%98/Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"]],"content":"安装 Apache 启动apache 启动apache遇到错误:httpd: Could not reliably determine the server’s fully qualified domain name 1)进入apache的安装目录:(视个人安装情况而不同) 2)编辑httpd.conf文件，搜索”#ServerName”，添加ServerName localhost:80 3)再重新启动apache 即可。 配置防火墙 安装PHP 配置apache+php 安装Memcache 升级apache到2.4.57原apache版本：2.4.37新apache版本：2.4.57 下载 备份 安装 查看版本 启动apache"},{"title":"Apache 服务器中.htaccess文件的使用","date":"2018-09-05T16:00:00.000Z","url":"/201809/286f77925410.html","tags":[["Apache","/tags/Apache/"],[".htaccess","/tags/htaccess/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["Apache服务器","/categories/%E5%AE%9E%E6%88%98/Apache%E6%9C%8D%E5%8A%A1%E5%99%A8/"]],"content":".htaccess是什么.htaccess文件(或者分布式配置文件）,全称是Hypertext Access(超文本入口)。 提供了针对目录改变配置的方法， 即在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。 使用 apache服务器中开启配置 httpd.conf 编写.htaccess "},{"title":"VirtualBox安装Centos","date":"2018-05-31T16:00:00.000Z","url":"/201806/d6389aebe42b.html","tags":[["Linux","/tags/Linux/"],["VirtualBox","/tags/VirtualBox/"],["CentOS","/tags/CentOS/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["06-Linux相关知识","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/06-Linux%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"]],"content":"VirtualBox安装CentOS准备工作宿主机：macbookVirtualBox版本：6.1.12 r139181 (Qt5.6.3)CentOS版本：7.9.2009 x86_64 下载地址： 创建虚拟机新建虚拟机名称自定义，建议写操作系统名称 内存设置内存大小建议选择 2048M 创建虚拟硬盘 虚拟硬盘文件类型 动态分配 文件位置和大小 创建完成完成后，进入首页进行盘片设置 安装盘片（镜像文件） 选择下载好的镜像文件 网络设置 网卡1:NAT网络 网卡2:仅主机（Host-Only）网络 安装系统启动虚拟机用上下键选择 Install CentOS7,回车 语言选择选中文，点继续 安装信息摘要必须将黄色感叹号的内容配置好后，才能开始安装点击安装位置，进入后直接点击完成，黄色叹号即可消失 配置设置root密码，完成即可 安装完成，重启 网络设置访问外网enp0s3网卡设置 按图中所示进行设置，完成后重启网卡，进行测试 与宿主机互通enp0s8网卡设置 按图中所示进行设置，完成后重启网卡，进行测试 "},{"title":"免费域名申请","date":"2018-02-28T16:00:00.000Z","url":"/201803/28b414bd8b90.html","tags":[["域名","/tags/%E5%9F%9F%E5%90%8D/"],["免费域名","/tags/%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":"官网： 账户：邮箱 密码：邮箱密码 在这个网站可以申请一个一年的免费域名服务 nucbadaomen.link"},{"title":"内网穿透工具","date":"2017-12-31T16:00:00.000Z","url":"/201801/f0e5b4543773.html","tags":[["内网穿透","/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"],["cpolar","/tags/cpolar/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["推荐","/categories/%E6%9D%82%E6%96%87/%E6%8E%A8%E8%8D%90/"]],"content":"内网穿透工具推荐： cpolar官网地址：cpolar.com 有免费套餐，不限流量，不需要手机号注册，支持架构多，使用简单，界面简洁，支持在网站查看远程端口 账号：邮箱 密码：第二排"},{"title":"PhpStorm整理","date":"2017-02-01T02:21:20.000Z","url":"/201702/2a664ab64dcf.html","tags":[["IDEA","/tags/IDEA/"],["PHP","/tags/PHP/"],["编辑器","/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"],["激活码","/tags/%E6%BF%80%E6%B4%BB%E7%A0%81/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["03-编辑器相关笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03-%E7%BC%96%E8%BE%91%E5%99%A8%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"]],"content":"PhpStorm整理 获取临时激活码：临时激活码： 试用期重置插件地址 备用插件地址 教程 常用插件 IdeaVim 使用vim的操作 CodeGlance 代码迷你地图 Chinese(Simplified) Language 中文语言包，汉化 BrowseWordAtCaret 选中相同文字高亮 常用配置字体 Font首选字体 JetBrains Mono 颜色和字体方案 Monokai 活动模板a) pre + Tab 设置缩写：pre 模板文本： 使用位置设置：php b) zhu + Tab 设置带名字的注释 缩写：zhu 模板文本： 编辑变量： 图1 c) zhushi + Tab 设置详细信息注释 缩写：zhushi 模板文本： 编辑变量：如图1 常用快捷键mac版本 command + shift + o 根据文件名，快速查询文件 command + o 根据类名，快速查询文件 command + f 查找当前文件 command + r 查找替换 command + shift + f 关键字全局查找 command + shift + r 高级替换 command + e 打开最近文件列表 command + shift + [ 向左切换tab页 command +shift + ] 向右切换tab页 command + shift + +,- 展开或缩起 command + 1切换左侧项目树结构 command + 7 切换左侧类树结构 command + F12 查看当前文件的结构 问题处理ctrl + shift + f 键失灵问题 关闭系统输入法的热键占用：输入法-》设置-》按键-》热键 插件配置BrowseWordAtCaretSetting（设置） -》 Editor（编辑器） -》 General（编辑器） -》 Appearance（外观） -》 Browse Word At Caret 下面选项勾选上 配色方案： Setting（设置） -》 Editor（编辑器） -》 配色方案 -》Browse Word At Caret "},{"title":"Linux 下 java 输出中文乱码问题","date":"2016-04-30T16:00:00.000Z","url":"/201605/96bf1cda4fda.html","tags":[["java中文乱码","/tags/java%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["问题处理","/categories/%E5%AE%9E%E6%88%98/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"]],"content":"1.检查java文件编码是否是UTF-82.检查系统环境是否安装了中文库 如果没有中文库，则先安装中文库 安装中文库 添加UTF-8字符集 配置环境变量 "},{"title":"Linux 下自定义环境变量文件","date":"2016-03-31T16:00:00.000Z","url":"/201604/78e744cf92e4.html","tags":[["环境变量配置","/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/"],["自定义环境变量配置文件","/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"]],"categories":[["实战","/categories/%E5%AE%9E%E6%88%98/"],["问题处理","/categories/%E5%AE%9E%E6%88%98/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"]],"content":"linux下配置自己的环境变量文件my_env.sh配置环境变量分为系统级和用户级，系统级所有用户生效，用户级针对特定用户，现场环境根据职能不同，会通过用户限制操作范围，环境变量修改以实际需要为准，遵循权限最小原则。 系统级一般添加系统环境变量，修改&#x2F;etc&#x2F;profile文件，如果操作失误，删除重要配置，影响系统运行。 centos7版本中 &#x2F;etc&#x2F;profile 默认扫描路径 &#x2F;etc&#x2F;profile.d&#x2F; 下sh文件，并添加内容到环境变量中，可以通过这种方式不操作&#x2F;etc&#x2F;profile增加环境变量。在&#x2F;etc&#x2F;profile.d&#x2F;下创建文件 my_env.sh，并设置环境变量，如jdk等，内容如下： 保存退出 加载配置文件 输出环境变量 用户级编辑用户文件：~&#x2F;.bash_profile，增加新path配置信息。如jdk： "},{"title":"CentOS 安装 JDK 环境","date":"2016-02-29T16:00:00.000Z","url":"/201603/e31e38164ad3.html","tags":[["java","/tags/java/"],["java运行环境","/tags/java%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/"],["jdk","/tags/jdk/"]],"categories":[["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["09-java相关笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/09-java%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"]],"content":"centos安装jdk源码下载jdk源码包  安装解压 配置环境变量 验证 编写HelloWorld.java,编译并执行 HelloWorld.java 编译 执行 "}]